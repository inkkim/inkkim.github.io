<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-02-12T22:50:04+09:00</updated><id>/feed.xml</id><title type="html">Eliot’s DB</title><subtitle>새로 알게 된 내용을 꾸준히 기록합니다.</subtitle><author><name>김인규</name></author><entry><title type="html">Elastic Goods Box 수령 후기</title><link href="/etc/Elastic-Goods-Box-%EC%88%98%EB%A0%B9-%ED%9B%84%EA%B8%B0/" rel="alternate" type="text/html" title="Elastic Goods Box 수령 후기" /><published>2021-02-12T00:00:00+09:00</published><updated>2021-02-12T00:00:00+09:00</updated><id>/etc/Elastic-Goods-Box-%EC%88%98%EB%A0%B9-%ED%9B%84%EA%B8%B0</id><content type="html" xml:base="/etc/Elastic-Goods-Box-%EC%88%98%EB%A0%B9-%ED%9B%84%EA%B8%B0/">&lt;h1 id=&quot;elastic-cloud&quot;&gt;Elastic Cloud&lt;/h1&gt;

&lt;p&gt;작년에 프로젝트 때 Elasticsearch와 Kibana를 사용할 기회가 있었습니다. 그중에서도 Kibana를 이용해서 서울특별시 내 따릉이 잔여대수 현황을 시각화 하기 위한 목적으로 사용했습니다. 이때 지도 시각화 패널에 Zoom 기능 제한이 있어 상용 기능인 X-Pack에 대한 권한이 있어야 했습니다. 고민하던 중 찾아보니 마침 작년에 Elastic Cloud 서울 리전이 런칭됨에 따라 X-Pack 기능까지 포함하여 2주간 무료로 체험판을 경험해볼 수 있었습니다. ELK Stack이 모두 갖춰진 인스턴스가 뚝딱 만들어지니 다시 설치할 필요없이 너무 편리하게 체험해볼 수 있어서 좋았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107752386-0307d680-6d62-11eb-8804-c368eff694f3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 설문조사에 참여하여 행운의 6인에 선정되어 Elastic Korea 측으로부터 Goods Box를 선물 받았습니다! 로고부터 너무 깔끔하고 평소 Elastic Stack에 관심을 가지고 공부하던 중에 이렇게 Goods를 선물로 주시니 너무 감사했습니다. 요즘은 이런 개발자스러운 스티커나 굿즈가 왜 이렇게도 가지고 싶던지 ㅎㅎ..&lt;/p&gt;

&lt;h1 id=&quot;구성&quot;&gt;구성&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107774774-cd271a00-6d82-11eb-8e2c-acc368dbe397.jpg&quot; alt=&quot;20210206_020713&quot; /&gt;&lt;/p&gt;

&lt;p&gt;꽤나 튼튼한 민트색같은 연두색 박스에 담아 보내주셨습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107774854-e9c35200-6d82-11eb-9052-0271df5ef094.jpg&quot; alt=&quot;20210206_114834&quot; /&gt;&lt;/p&gt;

&lt;p&gt;박스 내부에는 나름 포장 뽀시래기도 넣어서 선물 분위기를 내주셨습니다 😊&lt;/p&gt;

&lt;h2 id=&quot;sticker&quot;&gt;Sticker&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107774910-fa73c800-6d82-11eb-9783-e7882b18af0d.jpg&quot; alt=&quot;20210206_151311&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본적인 Elastic Logo 모양의 스티커와 자사 솔루션 스티커들로 구성되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;카드명함-지갑&quot;&gt;카드명함 지갑&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775020-1f683b00-6d83-11eb-8d70-6ea383f5a829.jpg&quot; alt=&quot;20210206_153021&quot; /&gt;&lt;/p&gt;

&lt;p&gt;은은한 Elastic Logo가 새겨진 블랙 색상의 2-slot 카드명함 지갑입니다. 이건 무려 3개나 챙겨주셨어요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775026-20996800-6d83-11eb-9b76-c162ae3fd13a.jpg&quot; alt=&quot;20210206_153026&quot; /&gt;&lt;/p&gt;

&lt;p&gt;후면에는 3M 양면 강력 테이프가 부착되어 있어 스마트폰 케이스 뒤에 부착할 수 있을 것 같습니다.&lt;/p&gt;

&lt;h2 id=&quot;griptok&quot;&gt;Griptok&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775125-3dce3680-6d83-11eb-9eb1-bf13f1a86d21.jpg&quot; alt=&quot;20210206_153119&quot; /&gt;&lt;/p&gt;

&lt;p&gt;요즘 스마트폰 뒤에 많이들 부착하는 그립톡도 2개 챙겨주셨습니다. 가장 실용적이고 마음에 드는 선물입니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775129-3eff6380-6d83-11eb-9a29-c9a8bfb63587.jpg&quot; alt=&quot;20210206_153130&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;수첩볼펜&quot;&gt;수첩/볼펜&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775205-58a0ab00-6d83-11eb-9f56-122f48dafdf8.jpg&quot; alt=&quot;20210206_153057&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775210-59d1d800-6d83-11eb-92d9-733d260c71dc.jpg&quot; alt=&quot;20210206_153107&quot; /&gt;&lt;/p&gt;

&lt;p&gt;수첩은 쨍한 하늘색인게 묘하게 이쁘고, 크기도 딱 포켓에 들어갈만한 사이즈여서 얇은 겉옷에 넣어두기 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775259-67875d80-6d83-11eb-9ab2-78d6362afe89.jpg&quot; alt=&quot;20210206_153202&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Elastic Logo가 그려진 볼펜과 수첩입니다. 볼펜은 호텔 탁자에서 만나볼 수 있는 사무용 볼펜과 많이 닮았습니다.&lt;/p&gt;

&lt;h2 id=&quot;양말&quot;&gt;양말&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775481-acab8f80-6d83-11eb-90b7-dc69403972cd.jpg&quot; alt=&quot;20210206_153406&quot; /&gt;&lt;/p&gt;

&lt;p&gt;알록달록한 색상에 Elastic Logo가 그려진 긴 양말입니다. 이건 날이 풀리면 반바지에 운동화로 코디 시도해봐야겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;multi-charging-cable&quot;&gt;Multi Charging Cable&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775376-8980e000-6d83-11eb-9de6-d864cac323e2.jpg&quot; alt=&quot;20210206_153427&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5 in 1 Multi Charging Cable 입니다. USB 케이블은 전류를 공급받기 위한 케이블이고, 나머지는 충전을 위한  Micro 5pin, lightning cable, USB-C type 케이블로 구성되어 있습니다.&lt;/p&gt;

&lt;p&gt;요즘 대부분 USB-C type으로 넘어오긴 했지만 여전히 Micro 5pin이나 Lightning Cable만 지원하는 악명높은 기기들이 많습니다. 휴대용으로 이 케이블 하나만 들고다니면 급할 때 충전 못하는 골치아픈 일은 피할 수 있을 것 같습니다.&lt;/p&gt;

&lt;h2 id=&quot;elastic-logo-t-shirts&quot;&gt;Elastic Logo T-Shirts&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775540-c6e56d80-6d83-11eb-9825-f90eb555ed39.jpg&quot; alt=&quot;20210206_150848&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전면에 Elastic Logo가 크게 프린팅 되어 있는 검은색 티셔츠입니다. 사실 가장 기대했던 Goods인데 그래서인지 가장 아쉽기도 한 부분입니다.&lt;/p&gt;

&lt;p&gt;일단 사이즈는 L인데 정사이즈라 저에게는 조금 작은게 아쉽습니다 😂 이왕이면 발송 전에 사이즈 조사 한 번 해서 보내주셨으면 조금 더 만족스러웠지 않을까 싶습니다.&lt;/p&gt;

&lt;p&gt;그리고 프린팅 된 부분이 너무 엉성해서 세탁 몇 번이면 너덜너덜해질 것 같습니다.. 어깨 소매 부분도 짧아서 썩 예쁜 핏은 아니어서 집에서 편하게 입는 정도로 굴려 줘야겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775555-ca78f480-6d83-11eb-9bc5-1bc6de8f6dc5.jpg&quot; alt=&quot;20210206_153337&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뒷면은 조그마한 Elastic Logo로 마무리 된 형태입니다.&lt;/p&gt;

&lt;h2 id=&quot;위생용품&quot;&gt;위생용품&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775637-e54b6900-6d83-11eb-83a9-e61e84918572.jpg&quot; alt=&quot;20210206_153306&quot; /&gt;&lt;/p&gt;

&lt;p&gt;휴대용 손소독제와 KF94 마스크 그리고 양치 셋트까지 혹독한 감염병 시대에 빛나는 깨알 위생용품들까지 챙겨주셨습니다!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/107775693-f85e3900-6d83-11eb-84f7-eb0646f4ca07.jpg&quot; alt=&quot;20210206_150456&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예쁜 선물 주셔서 감사합니다~🙏 잘 쓸게요 Elastic!👍&lt;/p&gt;</content><author><name>김인규</name></author><category term="Etc" /><category term="Elastic" /><summary type="html">최근 Elasticsearch Cloud 체험판을 이용한 후 설문조사에 참여하여 Elastic Korea 측으로부터 Elastic Goods Box를 선물 받았습니다.</summary></entry><entry><title type="html">Splunk 분산환경 구축하기</title><link href="/splunk/Splunk-%EB%B6%84%EC%82%B0%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Splunk 분산환경 구축하기" /><published>2021-01-20T00:00:00+09:00</published><updated>2021-01-20T00:00:00+09:00</updated><id>/splunk/Splunk-%EB%B6%84%EC%82%B0%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0</id><content type="html" xml:base="/splunk/Splunk-%EB%B6%84%EC%82%B0%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/">&lt;h1 id=&quot;splunk-배포방식&quot;&gt;Splunk 배포방식&lt;/h1&gt;

&lt;p&gt;Splunk의 주요 컴포넌트는 &lt;strong&gt;검색&lt;/strong&gt;을 담당하는 Search Head, &lt;strong&gt;수집&lt;/strong&gt;을 담당하는 Fowarder, &lt;strong&gt;저장&lt;/strong&gt;을 담당하는 Indexer가 존재합니다. 이 컴포넌트들을 어떤 형태로 배포하는지에 따라 다음과 같이 Splunk의 배포방식을 구분합니다.&lt;/p&gt;

&lt;h2 id=&quot;standalone&quot;&gt;Standalone&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105357987-eb44a300-5c38-11eb-8348-cdea6343bd51.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Splunk의 모든 기능과 컴포넌트가 단일 인스턴스에 모두 존재하는 가장 간소화 된 형태입니다. 주로 PoC를 위한 테스트나 개인적인 학습 용도로 사용합니다. Splunk를 설치하면 만나게 될 가장 기본적인 설정입니다.&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105358377-72921680-5c39-11eb-9179-ac69dd58e414.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Standalone과 비슷한 설정이지만 Splunk Server와 Forwarder로 데이터 저장과 수집이 구분된 형태입니다. Forwarder는 데이터 소스에 위치하여 데이터를 수집하고 Splunk Server에 전송합니다. Splunk Server는 데이터를 저장하며, Forwarder의 설정을 관리합니다.&lt;/p&gt;

&lt;h2 id=&quot;multi-instance&quot;&gt;Multi-Instance&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105358787-f64c0300-5c39-11eb-8e6b-b59ef5999d9e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Splunk는 분산 환경 Clustering을 통해 검색과 저장 성능이 크게 향상 될 수 있습니다. Multi-Instance 배포방식은 Splunk의 주요 컴포넌트가 모두 구분된 형태로 가장 효율적인 아키텍쳐입니다. &lt;strong&gt;검색&lt;/strong&gt;을 담당하는 Search Head, &lt;strong&gt;저장&lt;/strong&gt;을 담당하는 Indexer, &lt;strong&gt;수집&lt;/strong&gt;을 담당하는 Fowarder가 각각 다른 인스턴스에 위치하여 서로 연결되어 있는 형태입니다. 이 외에도 Indexer Clustering을 관리하는 Cluster Master(CM)이 존재할 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;search-head-clustering&quot;&gt;Search Head Clustering&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Search Head들을 그룹화하여 검색을 위한 중앙 리소스를 형성하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deployer&quot;&gt;Deployer&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;다른 클러스터 App이나 설정값을 배포하는 인스턴스&lt;/li&gt;
  &lt;li&gt;클러스터 외에 위치하여 각 Indexer들에 설정값이나 App을 업데이트 하는 역할&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;search-peers&quot;&gt;Search Peers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Search Head Cluster 내 Indexer들로 각 Indexer들은 독립적임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;load-balancer&quot;&gt;Load Balancer&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;User와 Cluster Member들 사이에 존재하는 third-party 소프트웨어로 User는 Search Head Cluseter에 하나의 인터페이스를 통해 접근할 수 있음&lt;/li&gt;
  &lt;li&gt;하나의 Indexer가 Captain 역할을 하며 클러스터 내 다양한 활동을 총괄함&lt;/li&gt;
  &lt;li&gt;각 Indexer들은 Search Request,Schedule Jobs, Replicate Artifacts, Update Configurations, Coordinate other activities등을 수행하기 위해 서로 상호작용 할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;captain&quot;&gt;Captain&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기본적으로 Search Header Cluster내 동적으로 선정되며, 동작하지 않는 경우 사용자가 임의로 고정할 수도 있음&lt;/li&gt;
  &lt;li&gt;Scheduling Jobs을 현재 작업량에 따라 각 Indexer들에게 할당&lt;/li&gt;
  &lt;li&gt;일괄적인 App 배포와 Search Head Member들을 관리하기 위한 Deployer가 필요&lt;/li&gt;
  &lt;li&gt;최소 3개의 Search Head가 있어야 Cluster 구성 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;indexer-clustering&quot;&gt;Indexer Clustering&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 손실을 예방하기 위해 데이터를 복제 후 분산 저장&lt;/li&gt;
  &lt;li&gt;여러 Indexer들을 관리함으로써 가용성 향상 도모&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cluster-mastercm&quot;&gt;Cluster Master(CM)&lt;/h2&gt;

&lt;p&gt;데이터를 저장하지 않고, Peer Indexer의 작업 조정하는 역할을 합니다.&lt;/p&gt;

&lt;h2 id=&quot;peer-indexer&quot;&gt;Peer Indexer&lt;/h2&gt;

&lt;p&gt;Fowarder로부터 데이터를 수신받아 Bucket에 저장하며, Indexer끼리 Clustering을 이룹니다. Indexer Cluster 내 모든 Peer Indexer들은 모두 CM과 연결되어 있으며, 각 Peer Indexer들은 복제 포트를 통해 서로 통신하여 데이터를 복제합니다.&lt;/p&gt;

&lt;h1 id=&quot;데이터-흐름도&quot;&gt;데이터 흐름도&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105367163-817dc680-5c43-11eb-9130-c69781bc801a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 포스팅에서 다뤄볼 아키텍쳐는 Multi-Instance 분산 환경입니다. 컴퓨터 리소스가 한정된 관계로 분산환경에 이해를 돕기 위해 최소한의 인스턴스 수로 구성하였습니다.&lt;/p&gt;

&lt;p&gt;데이터는 TA App을 통해 해당 인스턴스의 리소스 데이터를 수집합니다.  Search Head는 Forwarder로 데이터를 보내고 Forwarder는 다시 Indexer로 해당 데이터를 보냅니다.&lt;/p&gt;

&lt;p&gt;데이터를 전달받은 Indexer는 Bucket에 저장하며, Cluster Master를 매개로 연결된 Indexer Cluster에서 다른 Peer에게 정의된 Replication Factor만큼 자신의 Bucket을 복제합니다. 이때 각 Indexer는 복제 포트(8080)을 통해 서로 상호작용 하게 됩니다.&lt;/p&gt;

&lt;p&gt;Deployer는 Search Head Clustering의 설정을 담당하며, 각 Search Head에 Job을 분배합니다. 최종적으로 사용자가 Search Head에서 SPL을 통해 모든 인스턴스의 데이터가 저장된 Indexer Cluster에 저장된 데이터를 조회할 수 있게 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;splunk-분산환경-구축&quot;&gt;Splunk 분산환경 구축&lt;/h1&gt;

&lt;p&gt;분산환경 구축을 위해 Search Head(2), Indexer(3), Forwarder(1), Deployer(1), Cluster Master(1) 총 8대의 PC가 필요합니다.&lt;/p&gt;

&lt;h2 id=&quot;인스턴스-구성&quot;&gt;인스턴스 구성&lt;/h2&gt;

&lt;p&gt;인스턴스 구성을 위해 Google Cloud Platform(GCP) VM을 이용해 8개 대의 PC를 구성 하겠습니다. 참고로 GCP는 한 리전에 최대 8개 VM 인스턴스까지 생성 가능합니다. 같은 리전에서 생성된 VM 인스턴스는 같은 대역폭의 내부 IP를 할당받기 때문에 별도의 네트워크 설정이 필요 없습니다.&lt;/p&gt;

&lt;p&gt;그럼 먼저 공통적인 설치와 환경설정은 하나의 인스턴스에서 진행합니다. 이후 해당 인스턴스를 머신 이미지로 만들어 나머지 7개의 복제 인스턴스를 만든 후 분산환경을 설정하는 순으로 진행됩니다.&lt;/p&gt;

&lt;p&gt;각 VM 인스턴스의 OS는 Ubuntu 18.04.5, 사양은 n1-standard-1 (vCPUs: 1, RAM: 3.75GB)로 통일 하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;n1-standard-1 (vCPUs: 1, RAM: 3.75GB) * 8 예상 청구 비용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105579362-7785d000-5dc9-11eb-9314-87e25464b1b1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고로 n1-standart-1은 9개의 인스턴스를 약 26시간 사용했을 때 $14.30 가량 청구 금액이 예상됩니다. 하지만 GCP에서는 신규 가입자에게 1년 안에 사용이 가능한 $300 크레딧을 제공하고 있으니 추가로 비용을 지불할 일은 없으니 안심하고 사용해도 됩니다!&lt;/p&gt;

&lt;p&gt;GCP는 추가 비용이 청구될 경우 미리 등록된 결제 수단으로 청구되는 결제 시스템으로 운영되고 있습니다. 따라서 GCP를 최초 활성화 할 때 비용이 청구될 카드를 먼저 등록하는 과정이 있으니 참고하시길 바랍니다. 이 글에서는 회원가입 과정은 생략하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.GCP 계정 활성화&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GCP를 최초 활성화 한 후 프로젝트를 생성하면 다음과 같은 대시보드를 확인하실 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105580040-532bf280-5dcd-11eb-874f-e4355a34a9c8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.VM 인스턴스 생성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;좌측 상단의 햄버거 버튼에서 &lt;strong&gt;컴퓨팅 - Compute Engine - 가상머신 - VM 인스턴스 - 만들기&lt;/strong&gt;에서 새로운 인스턴스를 생성합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스 세부설정은 아래와 같이 설정합니다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;리전 : asia-northeast3(서울)&lt;/li&gt;
      &lt;li&gt;머신구성
        &lt;ul&gt;
          &lt;li&gt;시리즈 : N1&lt;/li&gt;
          &lt;li&gt;머신 유형 : n1-standard-1(vCPU 1개, 3.75GB 메모리)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;부팅 디스크 : Ubuntu 18.04 LTS&lt;/li&gt;
      &lt;li&gt;방화벽 : HTTP(S) 트래픽 허용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105580290-d732aa00-5dce-11eb-9e85-1542daf3570a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;약 1 - 2분 후 인스턴스 생성이 완료됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.방화벽 규칙 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;VM 인스턴스는 기본적으로 GCP VPC에 의해 네트워크가 완전 격리되어 있습니다. 분산환경 구축을 위해서는 여러 인스턴스가 서로 통신할 수 있어야 하므로 필요한 네트워크 대역과 포트를 허용 해주어야 합니다.&lt;/p&gt;

&lt;p&gt;Splunk에서 사용하는 포트는 다음과 같습니다. 이 중에서 통신을 하는 데 사용되는 포트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8089&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9997&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt;입니다. 또한 Web에 접근하기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8000&lt;/code&gt; 포트도 개방되어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105580427-abfc8a80-5dcf-11eb-807f-2df82de803f5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;방화벽 규칙 설정은 &lt;strong&gt;햄버거 버튼 - 네트워킹 - VPC 네트워크 - 방화벽 - 방화벽 규칙 만들기&lt;/strong&gt;에서 아래와 같이 설정합니다.
    &lt;ul&gt;
      &lt;li&gt;대상 : 네트워크의 모든 인스턴스&lt;/li&gt;
      &lt;li&gt;소스 IP 범위 : 0.0.0.0/0&lt;/li&gt;
      &lt;li&gt;프로토콜 및 포트 : 지정된 프로토콜 및 포트
        &lt;ul&gt;
          &lt;li&gt;tcp : 8089, 9997, 8080, 8000&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105580651-f92d2c00-5dd0-11eb-829d-ae46497c4971.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Splunk 설치&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 Splunk 제품 중에서도 Splunk Enterprise으로 진행합니다. Splunk가 유상 솔루션이긴 하지만 60일 체험판을 제공하고 있습니다. 단, 다운로드를 위해 Splunk 홈페이지 회원가입이 요구됩니다. 이는 이후에 Splunk App을 설치할 때에도 필요하니 가입해두시는 편이 좋습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM 인스턴스에서 새로 생성한 인스턴스의 &lt;strong&gt;연결 - SSH&lt;/strong&gt;를 통해 접속합니다.
    &lt;ul&gt;
      &lt;li&gt;원활한 설치를 위해 root 계정을 활성화 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;passwd
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su
Password:
root@splunk:/home/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;아래 명령어로 Splunk Enterprise를 다운로드 합니다.
    &lt;ul&gt;
      &lt;li&gt;Release는 2021.01.24 기준 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8.1.1&lt;/code&gt; 입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /opt/splunk.tgz https://www.splunk.com/bin/splunk/DownloadActivityServlet?architecture&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64&amp;amp;platform&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux&amp;amp;version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8.1.1&amp;amp;product&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;splunk&amp;amp;filename&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;splunk-8.1.1-08187535c166-Linux-x86_64.tgz&amp;amp;wget&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;종종 http, https 접근에 대한 방화벽 규칙을 허용 해도 VM 인스턴스에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;을 명령어로 위 주소에 대한 다운로드 파일을 받아오지 못하는 문제가 있습니다. 원인을 아시는 분은 댓글 남겨주시길 바랍니다.🙏&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;위 방법이 안 될 경우, 로컬에서 설치 파일을 받아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt; 명령어로 넘겨주는 방법으로 대체합니다.
    &lt;ul&gt;
      &lt;li&gt;로컬에서 &lt;a href=&quot;www.splunk.com&quot;&gt;Splunk&lt;/a&gt;에서 로그인 후 &lt;strong&gt;Products - Splunk Enterprise - Free Trial - Linux&lt;/strong&gt;에서 .tgz 설치 파일을 다운 받습니다.&lt;/li&gt;
      &lt;li&gt;VM 인스턴스에서 다음 명령어로 ssh key pair를 생성합니다.
        &lt;ul&gt;
          &lt;li&gt;해당 과정은 root 계정으로 진행합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;생성한 keyfile01(Private Key)는 복사하여 로컬에 저장합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# VM 인스턴스&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/keyfile01 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; root
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;400 ~/.ssh/keyfile01
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.ssh/keyfile01.pub &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; authorized_keys

&lt;span class=&quot;c&quot;&gt;# 로컬 (~/.ssh 에 keyfile01(Private Key) 저장 후 진행)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp splunk-8.1.1-08187535c166-Linux-x86_64.tar root@xxx.xxx.xxx.xxx:/opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;해당 압축 파일을 아래 명령어로 압축 해제 해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvzf&lt;/span&gt; splunk-8.1.1-08187535c166-Linux-x86_64.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Splunk 설치 파일은 압축이 해제된 폴더 내 splunk/bin 위치에 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;splunk/bin
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./splunk start &lt;span class=&quot;nt&quot;&gt;--accept-license&lt;/span&gt;
This appears to be your first &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;running this version of Splunk.

Splunk software must create an administrator account during startup. Otherwise, you cannot log &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Create credentials &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the administrator account.
Characters &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not appear on the screen when you &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;credentials.

Please enter an administrator username: &amp;lt;admin&amp;gt;
Password must contain at least:
   &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 8 total printable ASCII character&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Please enter a new password: &amp;lt;Password&amp;gt;
Please confirm new password: &amp;lt;Password&amp;gt;

Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;web server at http://127.0.0.1:8000 to be available..... Done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마침내 Splunk 서버 설치를 완료했습니다. 이전에 방화벽 규칙 중에 Web Port에 해당하는 8000을 허용 해두었으므로, 이제 해당 VM 인스턴스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;외부 IP:8000&lt;/code&gt;로 Splunk 서버에 접근할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105704187-c199bd80-5f51-11eb-844d-fb85c4e0b726.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.데이터 수집 설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Splunk 분산 환경이 제대로 동작하는지 확인하기 위해 테스트로 각 인스턴스의 리소스 데이터를 수집 해보겠습니다. Splunk에서 Linux 혹은 Unix 계열의 OS에서 리소스 데이터를 수집하는 방법은 &lt;strong&gt;Splunk App for Unix and Linux&lt;/strong&gt;와 &lt;strong&gt;Splunk Add-on for Unix and Linux&lt;/strong&gt;를 이용하는 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱 - 추가 앱 찾기 - nix 검색&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105706356-c7dd6900-5f54-11eb-9bbd-260357f43ecb.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Splunk Add-on for Unix and Linux&lt;/strong&gt;와 &lt;strong&gt;Splunk App for Unix and Linux&lt;/strong&gt;를 설치합니다.
    &lt;ul&gt;
      &lt;li&gt;설치 시 splunk 홈페이지의 계정이 필요합니다.&lt;/li&gt;
      &lt;li&gt;모두 설치 후 나중에 다시 시작을 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105706631-1f7bd480-5f55-11eb-8487-8ad431c93823.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM 인스턴스 CLI 환경에서 App의 수집 정보를 아래와 같이 설정합니다.
    &lt;ul&gt;
      &lt;li&gt;Splunk 내 App들은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/splunk/etc/apps&lt;/code&gt; 내에 위치합니다.&lt;/li&gt;
      &lt;li&gt;혹시 Vi 편집기가 낯선 분들은 &lt;a href=&quot;https://inkkim.github.io/etc/Vi-사용법-완벽-가이드/&quot;&gt;Vi 사용법 완벽 가이드&lt;/a&gt;를 참고하세요.&lt;/li&gt;
      &lt;li&gt;App의 default 디렉토리에는 기본 설정 관련 각종 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conf&lt;/code&gt; 파일이 위치합니다.&lt;/li&gt;
      &lt;li&gt;App의 local 디렉토리는 default와 동일하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conf&lt;/code&gt; 파일이 위치할 수 있으며, default 보다 우선 적용 대상에 속합니다. 그래서 일반적으로 default의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conf&lt;/code&gt;파일은 그대로 유지하고, 수정이 필요한 부분은 local에 복사하여 수정합니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conf&lt;/code&gt; 파일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; 스탠자를 기준으로 설정이 구분됩니다.
        &lt;ul&gt;
          &lt;li&gt;[default] 스탠자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.conf&lt;/code&gt; 파일 내 공통적으로 적용할 설정값을 정의합니다.
            &lt;ul&gt;
              &lt;li&gt;저장할 기본 index를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index = ubuntu&lt;/code&gt;로 설정합니다.
                &lt;ul&gt;
                  &lt;li&gt;해당 인덱스가 없으면 수집하지 않습니다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs.conf&lt;/code&gt;에서는 기본적으로 모든 수집 옵션이 비활성화 되어 있으므로, 필요한 수집 옵션만 활성화합니다.
            &lt;ul&gt;
              &lt;li&gt;disabled = 1 -&amp;gt; 0&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /opt/splunk/etc/apps/Splunk_TA_nix/local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /opt/splunk/etc/apps/Splunk_TA_nix/defualt/inputs.conf /opt/splunk/etc/apps/Splunk_TA_nix/local/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi /opt/splunk/etc/apps/Splunk_TA_nix/local/inputs.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105713003-f449b300-5f5d-11eb-95bc-0ab5fbe5df79.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105713207-2eb35000-5f5e-11eb-84ee-c6799983e1f7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수집할 데이터가 저장될 인덱스를 생성합니다.
    &lt;ul&gt;
      &lt;li&gt;설정 - 데이터 - 인덱스 - 새로 만들기인덱스에서 &lt;strong&gt;ubutu&lt;/strong&gt; 인덱스 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105713647-bd27d180-5f5e-11eb-9462-b6bedfb8660d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;App 및 인덱스 설정 동기화를 위해 서버를 재시작 합니다.
    &lt;ul&gt;
      &lt;li&gt;설정 - 시스템 - 서버 컨트롤 - Splunk 다시 시작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105713923-08da7b00-5f5f-11eb-869b-2d697ae6d415.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search &amp;amp; Report App에서 아래 명령어로 데이터 수집 현황을 확인합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105714232-6f5f9900-5f5f-11eb-96d8-1d66d299eb1e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Host의 리소스 데이터를 수집하는 Standalone Splunk Server 설정이 완료 됐습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.VM 인스턴스 복제&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GCP에서는 스냅샷 기능처럼 현재 상태를 이미지로 만드는 머신 이미지 기능을 제공합니다. 이제 공통적인 설정은 마무리 됐으니 이 VM 인스턴스의 상태를 머신 이미지로 만들고, 이를 이용해 나머지 7개의 VM 인스턴스를 생성 해보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 VM 인스턴스의 메뉴 - 새 머신 이미지에서 머신 이미지를 생성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105715660-388a8280-5f61-11eb-9ad6-b5477d371e33.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compute Engine - 가상 머신 - VM 인스턴스 - 인스턴스 만들기 - 머신 이미지의 새 VM 인스턴스에서 새로 생성한 머신 이미지를 이용해 새 인스턴스를 생성합니다.
    &lt;ul&gt;
      &lt;li&gt;NGD(&lt;del&gt;노가다&lt;/del&gt;) Method로 나머지 7개의 인스턴스를 생성합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105719003-2a3e6580-5f65-11eb-93ca-6dfe6605b6a9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105720631-fbc18a00-5f66-11eb-8e44-9c3278f48f02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;분산환경-설정&quot;&gt;분산환경 설정&lt;/h2&gt;

&lt;p&gt;Splunk 분산환경 구축을 위해 각 인스턴스에 임의로 Splunk 서버를 다음과 같이 지정하겠습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Splunk 서버&lt;/th&gt;
      &lt;th&gt;VM 인스턴스&lt;/th&gt;
      &lt;th&gt;역할&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cluster Master(CM)&lt;/td&gt;
      &lt;td&gt;splunk0&lt;/td&gt;
      &lt;td&gt;Indexer Cluster에서 Peer Indexer 관리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Indexer&lt;/td&gt;
      &lt;td&gt;splunk1/splunk2/splunk3&lt;/td&gt;
      &lt;td&gt;데이터를 Forwarder에서 전달받아 저장하고, Search Head로부터 SPL로 데이터 조회 요청을 처리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Forwarder&lt;/td&gt;
      &lt;td&gt;splunk4&lt;/td&gt;
      &lt;td&gt;데이터 수집 후 Indexer에게 전달&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Deployer&lt;/td&gt;
      &lt;td&gt;splunk5&lt;/td&gt;
      &lt;td&gt;Search Head에 대한 설정과 App 정보를 일괄 배포 및 관리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Search Head&lt;/td&gt;
      &lt;td&gt;splunk6/splunk7&lt;/td&gt;
      &lt;td&gt;SPL문을 통해 Indexer에 데이터 조회 요청&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;먼저 8개 서버 모두 일괄적으로 Splunk Server가 부팅 시 자동시작 되도록 설정하겠습니다. 참고로 Mac은 Iterm2나 Windows는 MobaXterm과 같은 툴을 이용하시면 멀티 세션관리하는 데 수월합니다. 이번 글에서는 Mac의 Iterm2를 기준으로 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;Iterm2에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command + d&lt;/code&gt;는 Split 세션을 생성합니다. 이때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option + Command + i&lt;/code&gt;키를 누르면 다중 입력을 활성화합니다. 이점 참고하여 멀티 세션에서 동일한 작업을 해야할 때 요긴하게 사용하시길 바랍니다 :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106152770-2a3aa180-61c1-11eb-90bb-6d89581eb305.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Local&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ~/.ssh/keyfile01 root@&amp;lt;VM 인스턴스 외부IP&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 각 VM 인스턴스&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/opt/splunk/bin/./splunk stop
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/opt/splunk/bin/./splunk start &lt;span class=&quot;nt&quot;&gt;--accept-license&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/opt/splunk/bin/./splunk &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;boot-start 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 각 서버의 역할을 명시하기 위해 다음과 같이 Splunk 서버의 별칭을 정의합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설정 - 시스템 - 서버 설정 - 일반 설정에서 Splunk 서버 이름 및 기본 호스트 이름을 각 Splunk 서버 역할에 맞게 수정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106154637-2871dd80-61c3-11eb-9a83-6180b1a738ab.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM 인스턴스에서 아래 명령어로 모든 Splunk Server Restart&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/opt/splunk/bin/./splunk restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1.Search Head -&amp;gt; Forwarder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;먼저 Search Head에서 수집중인 리소스 데이터를 Forwarder에 전달 하겠습니다. 여기서 반드시 아셔야 할 것은 원래 &lt;strong&gt;Search Head는 원래 오롯이 Indexer의 데이터를 조회하는 역할&lt;/strong&gt;이지만 이번 글에서는 적은 수의 VM 인스턴스로 분산환경을 구축 하다보니 Universal Forwarder의 역할도 수행하는 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forwarder에서는 설정 - 데이터 - 전달 및 수신 - 데이터 수신 - 수신 설정 - 새 수신 포트에서 9997 수신포트 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106160573-52c69980-61c9-11eb-822f-ae10d3ff33dd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 Search Head에서 설정 - 데이터 - 전달 및 수신 - 데이터 전달 - 전달 설정 - 새 전달 호스트를 통해 Forwarder를 추가
    &lt;ul&gt;
      &lt;li&gt;IP는 해당 VM 인스턴스(Forwarder:splunk4)의 내부 IP 사용&lt;/li&gt;
      &lt;li&gt;Port는 수신 포트 9997&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106160467-3296da80-61c9-11eb-8568-e6456c3de554.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forwarder에서 Search &amp;amp; Reporting 앱을 통해 리소스 데이터를 수집중인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt;라는 Index를 조회하여 수집 현황 확인
    &lt;ul&gt;
      &lt;li&gt;Forwarder, Search Head 1, 2 데이터 모두 조회 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106160317-0bd8a400-61c9-11eb-8d88-492f2db097b4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Forwarder -&amp;gt; Indexer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Forwarder는 수집한 데이터를 각 Indexer에 전달하고, Indexer는 전달받은 데이터를 Bucket에 저장합니다. 이전 방법과 동일하지만 이번에는 Forwarder가 각 Indexer에 데이터를 전달하고, 각 Indexer는 수신합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 Indexer에서 설정 - 데이터 - 전달 및 수신 - 데이터 수신 - 수신 설정 - 새 수신 포트에서 9997 수신포트 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106160622-5f4af200-61c9-11eb-8686-a34795c1429d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forwarder에서 설정 - 데이터 - 전달 및 수신 - 데이터 전달 - 전달 설정 - 새 전달 호스트를 통해 각 Indexer 추가
    &lt;ul&gt;
      &lt;li&gt;IP는 해당 VM 인스턴스(Indexer:splunk1~3)의 내부 IP 사용&lt;/li&gt;
      &lt;li&gt;Port는 수신 포트 9997&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106160753-83a6ce80-61c9-11eb-8efd-1abb486a0b76.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Cluster Master &amp;lt;-&amp;gt; Indexers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;데이터 저장 안정성과 검색 효율성을 위한 인덱서 클러스터링을 활성화하기 위하여 Cluster Master 즉, 마스터 노드로 활성화 합니다. 각 Indexer들은 CM의 피어 노드로 활성화 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cluster Master에서 설정 - 분산 환경 - 인덱서 클러스터링 - 인덱서 클러스터링 활성화 - 마스터 노드 선택
    &lt;ul&gt;
      &lt;li&gt;보안키 설정 후 마스터 노드 활성화 후 재시작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106161600-8bb33e00-61ca-11eb-87e3-50b9bdb88b54.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 Indexer에서 설정 - 분산 환경 인덱서 클러스터링 - 인덱서 클러스터링 활성화 - 피어 노드 선택
    &lt;ul&gt;
      &lt;li&gt;마스터 URI : Cluster Master의 내부 IP&lt;/li&gt;
      &lt;li&gt;피어 복제 포트 : 8080&lt;/li&gt;
      &lt;li&gt;보안키 : 마스터 노드 활성화 시 설정한 보안키&lt;/li&gt;
      &lt;li&gt;클러스터 레이블 : cm&lt;/li&gt;
      &lt;li&gt;피어노드 활성화 후 재시작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/106161796-be5d3680-61ca-11eb-9b1e-25e0c1b93cb7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 Search Head에서 설정 - 분산 환경 인덱서 클러스터링 - 인덱서 클러스터링 활성화 - 검색 헤드 노드 선택
    &lt;ul&gt;
      &lt;li&gt;마스터 URI : Cluster Master의 내부 IP&lt;/li&gt;
      &lt;li&gt;보안키 : 마스터 노드 활성화 시 설정한 보안키&lt;/li&gt;
      &lt;li&gt;검색 헤드 노드 활성화 후 재시작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;작성중입니다 . . .  🚧&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.splunk.com/Documentation/Splunk/8.1.1/DistSearch/Whatisdistributedsearch&quot;&gt;About distributed search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.splunk.com/Documentation/Splunk/8.1.1/DistSearch/Overviewofconfiguration&quot;&gt;Deploy a distributed search environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>김인규</name></author><category term="Splunk" /><category term="Splunk" /><category term="Clustering" /><summary type="html">빅데이터 플랫폼 Splunk의 분산환경 구축으로 검색 성능과 안전성을 향상시키는 방법을 알아봅니다.</summary></entry><entry><title type="html">Splunk 톺아보기</title><link href="/splunk/Splunk-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/" rel="alternate" type="text/html" title="Splunk 톺아보기" /><published>2021-01-19T00:00:00+09:00</published><updated>2021-01-19T00:00:00+09:00</updated><id>/splunk/Splunk-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0</id><content type="html" xml:base="/splunk/Splunk-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0/">&lt;h1 id=&quot;splunk란&quot;&gt;Splunk란?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/104919033-f7322a00-59d8-11eb-97d8-cef888baa5fa.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Splunk란 기업 내 존재하는 다양한 유형의 머신 데이터에 대해 위치, 규모, 종류에 관계없이 수집 및 분석을 수행할 수 있는 &lt;strong&gt;머신 빅데이터 플랫폼&lt;/strong&gt;입니다. 여기서 머신 데이터란 서버/Network 로그, 설비 데이터, 애플리케이션 로그, 기타 모든 텍스트 형태의 데이터 등을 말합니다.&lt;/p&gt;

&lt;p&gt;이러한 데이터들은 Splunk를 통해 정형/비정형 데이터 모두 수용할 수 있으며 데이터 포맷, 용량에 제한이 없는 것이 특징 입니다. 또한 &lt;strong&gt;수집 - 저장 - 분석 - 시각화&lt;/strong&gt;까지 별도의 외부 솔루션이나 복잡한 코딩 필요없이 모두 가능하다는 점 또한 Splunk의 강점 입니다. 모든 데이터는 실시간으로 분석이 가능하며 분산 저장 및 검색으로 뛰어난 성능을 자랑합니다.&lt;/p&gt;

&lt;p&gt;이러한 Splunk는 &lt;a href=&quot;https://splunkbase.splunk.com&quot;&gt;Splunkbase.com&lt;/a&gt;을 통해 약 DevOps, IT 운영, 보안, BA, IoT/산업 데이터 등 다양한 분야의 수 천개의 Application을 지원하여 외부 시스템과의 연동이나 확장이 용이 합니다.&lt;/p&gt;

&lt;p&gt;Splunk는 Enterprise, Cloud 등 유상 라이센스 형태로 제공되며, 다른 빅데이터 엔진과 다르게 다음과 같은 특징들이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Schema at Read : 데이터를 읽을 때 Field(Schema)가 정해짐&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SPL(Splunk Processing Language) 사용  : |(Pipe)로 초보자도 쉽게 데이터 조회&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 종류의 Raw 데이터 수용&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;활용-사례&quot;&gt;활용 사례&lt;/h2&gt;

&lt;h3 id=&quot;siem-security-information-and-event-management&quot;&gt;SIEM (Security Information and Event Management)&lt;/h3&gt;

&lt;p&gt;SIEM이란 보안 이벤트 데이터, 네트워크 스트림 데이터를 실시간으로 분석하여 위협관리, 사고대응 하는 시스템입니다. 또한 공격, 위협 탐지 및 관리, 조사, 모니터링, 탐지 하는 데 사용됩니다.&lt;/p&gt;

&lt;p&gt;Splunk는 여러 이종의 데이터를 제약없이 수용할 수 있기 때문에 SIEM과 같은 보안, IT 운영 관제 분야에서 많이 사용되고 있으며 Splunk ES(Enterprise Security)라는 솔루션도 제공되고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;ueba-user-and-entity-behavior-analytics&quot;&gt;UEBA (User and Entity Behavior Analytics)&lt;/h3&gt;

&lt;p&gt;UEBA란 일반적인 보안 분석이 아닌 사용자 행위를 주된 목적으로 하는 분석입니다. 이외에도 host, device와 같은 것들과 함께 분석됩니다. 이는 분석대상이 사용자의 행위에 집중되어 있고, 결론적으로 악의적인 행동을 탐지하는 것을 목표로 하는 시스템입니다. 이에 대한 분석은 Rule-based 혹은 머신러닝으로 이뤄지기도 합니다.&lt;/p&gt;

&lt;h3 id=&quot;fdsfraud-detection-system&quot;&gt;FDS(Fraud Detection System)&lt;/h3&gt;

&lt;p&gt;FDS란 금융권 기업에서 온라인 금융 거래 정보를 실시간 수집 및 분석하여 의심 거래 추적 및 인증을 강화하는 시스템입니다. 이 역시 Splunk의 뛰어난 로그 검색 성능 덕분에 대량의 트랜잭션 데이터가 오고가는 금융권에서도 많이 사용하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;단점&quot;&gt;단점&lt;/h2&gt;

&lt;p&gt;Splunk는 뛰어난 검색 성능과 무한한 확장성을 가지면서 데이터 수집부터 분석 및 시각화까지 모두 갖춘 뛰어난 빅데이터 엔진임에 틀림 없습니다. 하지만 완벽해보이는 Splunk에도 단점이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;유상 라이센스&lt;/strong&gt;이기 때문에 비용이 부담스러워 용도에 따라 사용에 제약사항이 될 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;수 천개의 App 생태계를 보유하고 있지만 여전히 지원되지 않는 부분이 존재합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이벤트 검색을 위한 &lt;strong&gt;SPL&lt;/strong&gt;은 어려운 언어는 아니지만 오롯이 Splunk를 위한 언어라는 점 또한 장애물로 작용할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오픈소스가 아니기 때문에 활용 사례가 잘 공유되지 않는 점이 아쉽습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주요-컴포넌트&quot;&gt;주요 컴포넌트&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/104925844-ae7f6e80-59e2-11eb-8fbd-66a59870f703.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Splunk는 크게 Search Head, Indexer, Forwarder 총 3개로 나뉩니다. &lt;strong&gt;Fowarder&lt;/strong&gt;는 데이터를 수집하여 &lt;strong&gt;Indexer&lt;/strong&gt;에 저장하고 &lt;strong&gt;Search Head&lt;/strong&gt;는 Indexer에 저장된 Index를 SPL를 통해 검색하는 구조입니다. 각 컴포넌트(서버)의 자세한 역할을 다음과 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;search-head&quot;&gt;Search Head&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;웹 기반 UI로서 사용자 생성 및 권한을 정의하고, APP 관리 기능을 제공함&lt;/li&gt;
  &lt;li&gt;SPL을 통해 Indexer에 저장된 Index를 검색&lt;/li&gt;
  &lt;li&gt;Chart, Report, Dashboard를 통한 데이터 시각화&lt;/li&gt;
  &lt;li&gt;재사용이 가능한 다양한 데이텀 모델 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;indexer&quot;&gt;Indexer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;머신 데이터 저장 및 프로세싱 기능 제공&lt;/li&gt;
  &lt;li&gt;Search Head로부터 SPL로써 검색 요청을 받아 저장된 데이터에 대한 프로세싱 수행&lt;/li&gt;
  &lt;li&gt;데이터는 Bucket 단위로 저장되며, 로그의 종류 및 보관 기간 등 각각의 요건에 맞는 저장 정책 제공
    &lt;ul&gt;
      &lt;li&gt;Hot Bucket
        &lt;ul&gt;
          &lt;li&gt;현재 수집되는 데이터가 Writing 되고 있는 Bucket&lt;/li&gt;
          &lt;li&gt;가장 최근의 데이터를 저장하고 있으므로, 고속 스토리지(SSD) 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Warm Bucket
        &lt;ul&gt;
          &lt;li&gt;더 이상의 Writing은 없고, Read Only 상태의 데이터&lt;/li&gt;
          &lt;li&gt;비교적 최근의 데이터를 저장하고 있으므로, 고속 스토리지(SSD) 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Cold Bucket
        &lt;ul&gt;
          &lt;li&gt;장기간 보관을 위한 Bucket&lt;/li&gt;
          &lt;li&gt;낮은 빈도로 접근되므로 저가 대용량 스토리지(HDD) 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Frozen Bucket
        &lt;ul&gt;
          &lt;li&gt;보관정책 주기가 지난 데이터&lt;/li&gt;
          &lt;li&gt;삭제 및 아카이빙&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Thawed Bucket
        &lt;ul&gt;
          &lt;li&gt;아카이빙 된 데이터를 다시 분석하기 위해 시스템에 장착하는 위치&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;foarwarder&quot;&gt;Foarwarder&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;로컬 시스템에 저장된 다양한 머신 데이터에 대한 수집 및 전달&lt;/li&gt;
  &lt;li&gt;File, 네트워크(TCP, UDP) 등 다양한 방식으로 데이터 수집
    &lt;ul&gt;
      &lt;li&gt;Agent(Forwarder) : File, Table, Wire Data&lt;/li&gt;
      &lt;li&gt;Agentless : HTTP, TCP, UDP, JMS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Universal Forwarder
    &lt;ul&gt;
      &lt;li&gt;데이터 수집과 Indexer로 전달이 주목적인 바이너리&lt;/li&gt;
      &lt;li&gt;목적에 맞게 필요한 기능만 포함하여 &lt;strong&gt;경량화&lt;/strong&gt; 된 형태&lt;/li&gt;
      &lt;li&gt;수집한 데이터를 Heavy Forwarder 혹은 Indexer로 전송&lt;/li&gt;
      &lt;li&gt;CSV와 같은 정형데이터 외에 다른 데이터는 &lt;strong&gt;Parsing 불가&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;syslog, intermediate forwarder&lt;/li&gt;
      &lt;li&gt;Built-in License외 추가 License 필요 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Heavy Forwarder
    &lt;ul&gt;
      &lt;li&gt;DB data와 같은 특정 데이터는 Universal Fowarder와 달리 모든 기능을 갖춘 Heavy Forwarder이 요구됨
        &lt;ul&gt;
          &lt;li&gt;DBconnect, Checkpoint, Cisco IPS&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Data를 Indexer에 저장하기 전에 &lt;strong&gt;Parsing&lt;/strong&gt;함
        &lt;ul&gt;
          &lt;li&gt;줄 삭제 및 합치기&lt;/li&gt;
          &lt;li&gt;Timestamp 추출&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Data Lake와 같은 Splunk가 아닌 다른 목적지에도 데이터를 보낼 수 있음&lt;/li&gt;
      &lt;li&gt;Splunk Enterprise License 요구됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터-구조&quot;&gt;데이터 구조&lt;/h2&gt;

&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Splunk 내 가장 큰 데이터 저장단위&lt;/li&gt;
  &lt;li&gt;RDBMS의 Database급&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;source&quot;&gt;Source&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Index 내 카테고리 의미&lt;/li&gt;
  &lt;li&gt;PostgreSQL의 Schema급&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sourcetype&quot;&gt;Sourcetype&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;RDBMS의 Table급&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bucket&quot;&gt;Bucket&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Indexer 내 Index들을 저장하는 장소&lt;/li&gt;
  &lt;li&gt;로그의 종류 및 보관 기간 등 각각의 요건에 맞는 저장 정책 제공
    &lt;ul&gt;
      &lt;li&gt;수집시기에 따라 고속/대용량 스토리지에 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;app&quot;&gt;App&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/105181756-8cffbd80-5b6f-11eb-91f4-c02692431799.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;App을 통해 용도,역할, 사용자에 따라 Splunk 내 다른 작업공간을 할당 할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;search--report-app&quot;&gt;Search &amp;amp; Report App&lt;/h3&gt;

&lt;p&gt;SPL을 통해 데이터를 조회하고 분석 및 시각화&lt;/p&gt;

&lt;h3 id=&quot;nix-app-for-unix-and-linux&quot;&gt;Nix App for Unix and Linux&lt;/h3&gt;

&lt;p&gt;Host내 Computing Resource에 대한 데이터를 수집&lt;/p&gt;

&lt;h3 id=&quot;splunk-db-connect-dbx&quot;&gt;Splunk DB Connect (DBX)&lt;/h3&gt;

&lt;p&gt;상용 RDBMS와 Splunk의 연동 지원&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.valence.co.kr/images/rk-0068/Splunk_new.pdf&quot;&gt;Splunk 소개&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>김인규</name></author><category term="Splunk" /><category term="Splunk" /><category term="SIEM" /><category term="UEBA" /><summary type="html">다양한 로그 데이터 분석으로 IT운영, 보안, IoT에 특화된 머신 빅데이터 플랫폼 Splunk에 대해 알아봅니다.</summary></entry><entry><title type="html">Kubernetes 기본용어 정리</title><link href="/kubernetes/Kubernetes-%EA%B8%B0%EB%B3%B8%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="Kubernetes 기본용어 정리" /><published>2021-01-05T00:00:00+09:00</published><updated>2021-01-05T00:00:00+09:00</updated><id>/kubernetes/Kubernetes-%EA%B8%B0%EB%B3%B8%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="/kubernetes/Kubernetes-%EA%B8%B0%EB%B3%B8%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC/">&lt;h1 id=&quot;️들어가며&quot;&gt;🤸‍♂️들어가며&lt;/h1&gt;
&lt;p&gt;이 글은 Kubernetes에 대해 공부한 것을 기록하기 위해 작성되었습니다. 혹시 틀린 부분이 있다면 언제든지 댓글을 남겨주세요 😊&lt;/p&gt;

&lt;h1 id=&quot;kubernetes란-&quot;&gt;⛴Kubernetes란 ?&lt;/h1&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103609779-f2459300-4f61-11eb-951e-8fa51bc3c9e0.png&quot; alt=&quot;K8s Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes는 Cotainerized Applications의 배포, 스케일링, 관리 등을 자동화 해주는 오픈 소스 컨테이너 오케스트레이션 엔진입니다. Kubernetes는 앞의 K와 s를 제외한 안쪽 8 글자를 줄여서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K8s&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;케이(에이)츠&lt;/code&gt; 라고 부르기도 합니다. 현재 K8s 오픈 소스 프로젝트는 Cloud Native Computing Foundation(CNCF)가 주관하고 있습니다.&lt;/p&gt;

&lt;p&gt;K8s의 전신은 Google 내부 프로젝트인 Borg가 전신입니다. 매일 수 억개의 컨테이너를 배포 및 생성하는 플랫폼으로 Google의 십 수년간의 컨테이너 오케스트레이션 노하우 기술이 녹아들어간 기술입니다. 지난 2014년에 Google에서 오픈소스로 공개하여 현재는 여러 IT 대기업들이 개발에 참여하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;탄생-배경&quot;&gt;탄생 배경&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103895670-1c4eaf00-5134-11eb-951c-d24dd925297d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기존의-서버-운영방식&quot;&gt;기존의 서버 운영방식&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103625188-fa133080-4f7d-11eb-937b-a416a042423e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각 서버마다 운영하는 애플리케이션이 달라 각 서버마다 용도에 맞는 네이밍을 합니다. 즉, 서버 하나에 용도가 한정되며 그에 맞게 관리가 되는 시스템이었습니다. 이러한 이유로 서버마다 특정 애플리케이션을 구동하기 위한 환경이 모두 다르고, 필요한 리소스도 상이합니다. 하지만 이 방법은 관리가 어렵고 안정적인 운영상의 이유로 리소스를 최대로 활용하지 못하는 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 상황에서 만약 서버 A에 문제가 발생한 상황을 가정 해봅시다. 서버 엔지니어는 서버 A에 서비스중인 애플리케이션 A가 지속적으로 배포하기 위해 문제가 된 서버를 복구할 때까지 다른 서버에 배포  해야 합니다. 하지만 다른 서버 역시 별도의 애플리케이션이 서비스중이기 때문에 애플리케이션 A와의 서버 B의 호환여부와 동시에 배포할 수 있는 리소스가 충분한지 여부도 확인해야 하는 매우 번거로운 과정이 따릅니다. 이러한 문제 상황은 언제 어느 서버에서 생길지 모르고, 발생할 때마다 위와 같은 절차가 이뤄지게 되면서 운영상의 어려움과 상당한 비용이 발생합니다.&lt;/p&gt;

&lt;h3 id=&quot;가상화-기술의-개발&quot;&gt;가상화 기술의 개발&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103897289-a4ce4f00-5136-11eb-856c-d1179fba1b36.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가상화 기술의 등장으로 한 서버에서 여러 가상 시스템 (VM)을 실행할 수 있게 됐습니다. 이는 기존의 방법보다 리소스를 더 효율적으로 활용할 수 있으며, 쉽게 애플리케이션을 추가하고 업데이트 할 수 있게 됐습니다. 다만, 각 VM은 Host Machine의 하드웨어를 공유하여 운영체제를 병렬로 운영할 수 있어 관리 비용이 줄어든다는 장점이 있지만, 반대로 각각의 VM을 위한 커널이 필요하기 때문에 불필요한 리소스 소모를 감수해야 한다는 단점이 존재한다.&lt;/p&gt;

&lt;h3 id=&quot;docker의-등장&quot;&gt;Docker의 등장&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103625397-42325300-4f7e-11eb-88dd-16bc55f251a6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;리눅스 컨테이너 기술을 적용한 Docker의 등장으로 환경에 상관없이 Docker가 설치되어있는 환경이면 동일하게 애플리케이션을 실행할 수 있게 됐습니다. 컨테이너는 VM과 유사하지만 Host OS 자원인 커널은 공유하고 애플리케이션 단위로 추상화하여 논리적으로 격리시키는 형태입니다. 즉, Hypervisor 없이 Docker Engine만으로 애플리케이션과 바이너리 및 라이브러리가 포함된 컨테이너만 올리면 되는 구조입니다. 이에 따라 특정 OS에 종속되지 않고, 리소스 손실률이 거의 없이 배포할 수 있게 됐습니다.&lt;/p&gt;

&lt;p&gt;덕분에 기존보다 관리가 한결 수월하게 됐지만, 컨테이너의 수가 늘어나면서 이것을 관리하는 것조차 어려움이 생겼습니다. 그래서 속속 등장하기 시작한게 컨테이너 오케스트레이션 기술입니다. Kubernetes는 그리스어로 배의 조타수라는 뜻으로, 로고도 조타 핸들 모양을 하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;k8s-클러스터-운영방식&quot;&gt;K8s 클러스터 운영방식&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103905066-7b66f080-5141-11eb-8318-d4a19389b91a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;K8s는 Master Node에서 Worker Node와 클러스터 내 Pod들을 관리합니다. Worker Node는 컨테이너가 실제 배포되는 곳이며 모든 명령은 Master Node의 API Server와 통신하여 필요한 작업 등을 수행합니다.&lt;/p&gt;

&lt;p&gt;K8s 클러스터는 프로덕션 환경에서 배포되는 컨테이너가 정상적으로 가동되고 있는지, 혹시 중단 되었다면 현재 Worker Node 혹은 다른 Node에 리소스가 충분한지 여부를 판단하고, 다시 새로운 컨테이너를 탄력적으로 재가동 해줍니다. K8s 클러스터는 정의된 내용 즉, Desired State에 따라 Current State와 같은지 주기적으로 확인하여 유지하려는 매커니즘으로 관리 됩니다. 즉, 기존에 서버 운영방식에서는 모두 서버 엔지니어가 했던 일들을 K8s 클러스터가 자동으로 관리해주게 되는 것이며, 이를 통해 무중단 배포가 가능해지는 것입니다. 그래서 우리는 이것을 컨테이너 오케스트레이션이라고 합니다.&lt;/p&gt;

&lt;h1 id=&quot;아키텍쳐&quot;&gt;🏗아키텍쳐&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103901861-0e515c00-513d-11eb-8673-851b85a54213.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;K8s는 기본적으로 사용자가 정의한 Disired State와 Current State를 유지하는 내용을 골자로 합니다. 클라우드 네이티브 관점에서 시스템의 지속적인 변화를 관찰하며 대응할 수 있게 하는 것입니다. K8s에서는 이러한 Control Loop 시스템을 구현하기 위해 아래와 같은 컴포넌트들로 구성되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103619579-5a51a480-4f75-11eb-8a9b-664d1d04cba4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;K8s의 컴포넌트는 크게 Master Node에 위치한 Control Plane 영역과 Worker Node 영역으로 구분 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;control-plane&quot;&gt;Control Plane&lt;/h2&gt;

&lt;p&gt;Control Plane은 Master Node에서 Worker Node와 클러스터 내 Pod들을 관리합니다. 이를 구성하는 요소들은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-api server&lt;/code&gt; : K8s 클러스터의 REST API를 제공하는 역할을 합니다. 사용자는 K8s CLI 명령도구인 kubectl을 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-api server&lt;/code&gt;에 명령을 요청하고, K8s 클러스터 내 대부분의 컴포넌트와 상호작용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-api server&lt;/code&gt;는 요쳥된 명령을 etcd에 저장한 후 다시 다른 Worker Node 들에게 해당 명령을 전달합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etcd&lt;/code&gt; : 고가용성 Key-Value 저장소로 K8s에 필요한 모든 데이터를 저장하는 실질적인 데이터베이스 입니다. 본래 구글의 Borg에서 사용하던 내부 분산 저장 솔루션인 Chubby의 역할을 하는 오픈소스 플랫폼입니다. K8s 클러스터 내 모든 설정값이나 클러스터의 상태를 저장하며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-api server&lt;/code&gt;와 유일하게 상호작용 할 수 있으며, 다른 모듈은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-api server&lt;/code&gt;를 거쳐 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etcd&lt;/code&gt; 데이터에 접근합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etcd&lt;/code&gt;는 서버 1개당 프로세스 1개만 사용할 수 있는데, 보통 etcd 자체를 클러스터링 한 후 여러 서버에 분산하여 실행해 안정성을 보장합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-scheduler&lt;/code&gt; : 노드가 할당되지 않은 새로운 Pod를 항상 체크하며 클러스터 내 노드의 자원 상태를 확인하여 해당 Pod가 실행할 최적의 노드를 선택해 줍니다. 만약 적합한 노드가 없다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-scheduler&lt;/code&gt;가 Pod를 배치할 수 있을 때까지 할당하지 않습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-controller-manager&lt;/code&gt; : Desired-state를 미리 정의한 뒤 Current-state가 Desired-state가 되도록 하는 Control Loop 시스템입니다. 예를 들어, 에어컨과 같이 희망온도를 설정하면 에어컨이 그에 맞게 온도를 유지하려고 하는 것과 같습니다. 실제 컴포넌트로는 실행할 Pod의 개수를 관리하는 Replication Controller와 클러스터 내 전체 노드에 특정 Pod를 실행하도록 하는 Daemon Set Controller 등이 있습니다. 이들은 복잡성을 낮추기 위해 각각 단일 바이너리로 컴파일되어 단일 프로세스로서 실행됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloud-controller-manager&lt;/code&gt; : 클라우드별 컨트롤 로직을 포함하는 컴포넌트입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloud-controller-manager&lt;/code&gt;를 통해 클러스터를 클라우드 공급자의 API에 연결합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-controller-manager&lt;/code&gt;와 동일하게 논리적으로 독립적인 여러 Control Loop 시스템을 단일 프로세스로 실행합니다. 실제 컴포넌트로는 클라우드 상에서 노드가 삭제되었는지 여부를 판단하는 Node Controller와 클라우드 공급자의 로드밸런서를 생성 및 삭제하는 것을 담당하는 Service Controller가 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;worker-node&quot;&gt;Worker Node&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; : 각 노드에서 실행되며, 노드에 할당된 Pod의 생명주기를 관리합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-api server&lt;/code&gt;로부터 요청을 받아 직접적으로 Pod를 생성하는 컴포넌트이며, Pod 안의 컨테이너에 Health check를 주기적으로 확인하여 Master Node에 상태를 전달하기도 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-proxy&lt;/code&gt; : 각 노드에서 실행되며, Pod로 연결되는 네트워크 프록시로 노드의 네트워크 규칙을 유지 및 관리하는 컴포넌트입니다. 이에 따라 내부 네트워크 세션이나 클러스터 외부에서 Pod로 네트워크 통신을 할 수 있도록 해줍니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;오브젝트&quot;&gt;오브젝트&lt;/h1&gt;

&lt;p&gt;K8s 오브젝트는 하나의 의도를 담은 레코드로 K8s 시스템에서 클러스터의 상태를 나타내고, 영속성을 가집니다. 즉, 사용자가 오브젝트를 생성함으로써 클러스터의 워크로드를 어떤 형태로 보이고자 하는지 K8s 시스템에 전달하며 이것이 곧 Desired State가 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;워크로드&quot;&gt;워크로드&lt;/h1&gt;

&lt;p&gt;K8s에서 구동되는 애플리케이션으로, 클러스터 상의 컨테이너를 구동 및 관리하는 데 사용하는 객체를 의미합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pod&lt;/code&gt; : 1개 이상의 Container를 포함하여 K8s에서 생성하고 관리할 수 있고, 배포 가능한 가장 작은 단위입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReplicaSet&lt;/code&gt; : Desired State를 유지하기 위해 두는 일종의 안전 장치입니다. 레플리카 수 유지를 위해 생성하는 신규 파드에 대한 데이터를 명시하는 파드 템플릿을 포함 합니다. 명시된 동일한 Replica(Pod)의 복제 개수에 대한 보증됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StatefulSet&lt;/code&gt; : Pod 이름에 대한 규칙성 부여와 개별 Pod에 대한 디스크 볼륨관리로 수시로 삭제되고 재생성되는 Pod 내의 디스크 내용이 유지될 수 있도록 하는 워크로드 리소스입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; : Replica Controller가 &lt;strong&gt;롤링 업데이트&lt;/strong&gt;하는 방식을 자동화해서 추상화한 개념이 Deployment입니다. 과거 배포 이력 유지 및 이전 버전으로 Revision이 관리되어 쉽게 &lt;strong&gt;롤백&lt;/strong&gt;이 가능합니다. 가장 보편적인 배포 단위이기도 하며, Desired 상태를 위해 Deployment내의 Replica Set, Pod들의 상태가 정해지게 됩니다. create 커맨드에 –record 플래그 붙이면 디플로이먼트 생성이 롤아웃 히스토리에 기록됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeamonSet&lt;/code&gt; : 클러스터 내 단일 Pod 복사본이 어느 노드 집합에서든 잘 작동하게 하는 역할을 합니다. 클러스터 스토리지 및 로그 수집, 노드 모니터링 데몬 실행합니다. 만약 클러스터에 새로운 노드가 설치되면 데몬셋이 동작하여 자동으로 해당 노드에 파드를 실행합니다. 클러스터에서 노드가 제거 될 경우 해당 노드에서 실행중이던 데몬셋 파드는 다른 노드로 이동하지 않고 그대로 사라지게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Job&lt;/code&gt; : 실행된 후에 종료해야 하는 성격의 작업을 실행할 때 사용되는 컨트롤러 입니다. 종류로는 단일 잡, (워크 큐가 있는) 병렬 잡 등이 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/home/&quot;&gt;Kubernetes Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/containers/what-is-kubernetes&quot;&gt;쿠버네티스(Kubernetes)란? 개념, 성능, 사용방법 및 차이점&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://subicura.com/2019/05/19/kubernetes-basic-1.html&quot;&gt;쿠버네티스 시작하기 - Kubernetes란 무엇인가?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>김인규</name></author><category term="Kubernetes" /><category term="Kubernetes" /><category term="CKA" /><category term="작성중" /><summary type="html">CKA 시험을 준비하면서 공부하는 Kubernetes의 기본 용어를 정리해본다.</summary></entry><entry><title type="html">Twitter API로 GCP Pipeline 구축하기</title><link href="/data%20engineering/Twitter-API%EB%A1%9C-GCP-Pipeline-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Twitter API로 GCP Pipeline 구축하기" /><published>2021-01-02T00:00:00+09:00</published><updated>2021-01-02T00:00:00+09:00</updated><id>/data%20engineering/Twitter-API%EB%A1%9C-GCP-Pipeline-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0</id><content type="html" xml:base="/data%20engineering/Twitter-API%EB%A1%9C-GCP-Pipeline-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/">&lt;h1 id=&quot;들어가며&quot;&gt;들어가며&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103449597-aa1e3a80-4ced-11eb-8c6b-592cbe5f8a67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 글에서는 T Academy의 ‘&lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=187#sec2&quot;&gt;데이터 엔지니어링 기초&lt;/a&gt;’ 강좌에 대해 정리하는 글입니다. 실습의 대략적인 개요는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Twitter API로부터 실시간으로 발생하는 Tweets Text를 요청&lt;/li&gt;
  &lt;li&gt;Pub/Sub Topic으로 전송 (Apache Kafka와 흡사)&lt;/li&gt;
  &lt;li&gt;Publish Trigger에 의해 BigQuery로 데이터를 전송하는 Cloud Functions를 실행&lt;/li&gt;
  &lt;li&gt;Data Studio와 BigQuery를 연동하여 시각화&lt;/li&gt;
  &lt;li&gt;GKE로 위 작업들을 실행하는 컨테이너 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-수집&quot;&gt;데이터 수집&lt;/h1&gt;
&lt;p&gt;Twitter는 Streaming Data를 수집하기 아주 좋은 예시입니다. Twitter Developer에서 개발자들에게 분석 혹은 서비스에 필요한 API를 제공합니다. 물론 사용량에따라 티어가 있지만 프리티어도 예제로 활용하기에 충분합니.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Twitter Developer 회원 등록&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;먼저 &lt;a href=&quot;https://developer.twitter.com/en&quot;&gt;Twitter Developer&lt;/a&gt;에서 회원가입을 진행합니다.&lt;/p&gt;

&lt;p&gt;기본 개인정보를 기입하고 다음과 같이 데이터를 어디에 사용할 것인지 적으라고 합니다. 200자 이상 영어로 적으라고 하는데 대충 공부하는데 쓴다는 내용으로 채우고 넘어가면 되겠습니다. 주의할 점은 Twitter Developer 계정은 기존 Twitter 계정을 기반으로 등록하는 과정입니다. 이후 Twitter 계정에 등록된 이메일 계정으로 확인 이메일이 전송되니 기존에 설정된 이메일 계정이 없다면 첫 번째 절차에서 이메일을 수정해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103474496-d5855000-4de7-11eb-88e4-2052b0863b9c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;확인 이메일 회신&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래 처럼 등록에 성공했다는 페이지와 함께 확인 이메일을 보냈다는 문구가 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103474502-e2a23f00-4de7-11eb-8353-b916f3ca7fe2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;등록된 이메일 계정에서 확인 메일에 Confirm 버튼을 눌러줍니5.다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103474592-d23e9400-4de8-11eb-8490-910edc7f87e0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;API Key와 Access Token 발급&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103474682-b38ccd00-4de9-11eb-8b01-449777e0167a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Twitter Developer에 로그인 후 Developer Portal에 접근하면 프로젝트 생성 절차가 진행되며 위와 같은 대시보드가 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103474744-2dbd5180-4dea-11eb-8d8a-110d3e75c612.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;화면 중앙에 열쇠 아이콘으로 보안 페이지에 접근하면 API Key와 Access Token을 발급할 수 있는 페이지가 나옵니다. 계정 가입일 기준 약 2주 이후에는 보안상 더 이상 조회가 불가능하니 미리 저장해두어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103474833-031fc880-4deb-11eb-9473-cfcd5d6de4ff.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;필자의 경우 편의를 위해 위와 같이 각 Value들을 .zshrc (혹은 .bashrc)에 환경변수로 저장해 두었습니다.&lt;/p&gt;

&lt;h1 id=&quot;google-cloud-platform-gcp-계정-설정&quot;&gt;Google Cloud Platform (GCP) 계정 설정&lt;/h1&gt;

&lt;p&gt;Google Cloud Platform(이하 GCP)에서는 모든 구글 계정 사용자에게 1년 안에 사용 가능한 $300 달러 상당의 크레딧을 제공하고 있습니다. 최초 이용 시 결제수단 등록이 필요할 수 있습니다.&lt;/p&gt;

&lt;p&gt;1.새 프로젝트 생성&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103475014-c5bc3a80-4dec-11eb-9834-718284026a2b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기존에 사용하시던 프로젝트와 혼재되지 않도록 새로운 프로젝트를 생성합니다.&lt;/p&gt;

&lt;p&gt;2.서비스 계정 생성&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103475077-7f1b1000-4ded-11eb-86eb-ed65860adba1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;햄버거 버튼 - ID 및 보안 - 서비스 계정 - 서비스 계정 만들기에 접근하여 위와 같이 BigQuery 데이터 편집자, 게시 구독 편집자 권한을 부여 해줍니다.&lt;/p&gt;

&lt;p&gt;3.서비스 계정 키 생성&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103475155-e8028800-4ded-11eb-9163-d64916ed271e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 서비스 계정의 옵션에서 키 만들기를 눌러 JSON 타입의 비공개 키를 생성 해줍니다.&lt;/p&gt;

&lt;h1 id=&quot;pubsub-주제-생성&quot;&gt;Pub/Sub 주제 생성&lt;/h1&gt;

&lt;p&gt;Pub/Sub은 Apache Kafka와 유사한 기능을 제공하는 GCP의 관리형 서비스입니다. 실시간으로 대량의 데이터를 한 곳에 저장하여 Publisher와 Subscriber 형태로 여러 서비스에 특정 주제의 데이터만 Listen하게 해주는 기능을 제공합니다.&lt;/p&gt;

&lt;p&gt;하지만 이 실습에서는 Cloud Function의 Trigger 역할로만 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103475184-52b3c380-4dee-11eb-89ea-9ee5ee390a8f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;햄버거 버튼 - 빅데이터 - Pub/Sub - 주제 만들기에 접근하여 twitter라는 이름의 주제를 생성해줍니다.&lt;/p&gt;

&lt;h1 id=&quot;bigquery-테이블-생성&quot;&gt;BigQuery 테이블 생성&lt;/h1&gt;

&lt;p&gt;BigQuery는 AWS RedShift, Snowflake와 같은 GCP의 DW 서비스입니다. SQL 쿼리를 분산 처리 매우 빠른 속도와 성능을 자랑하며 쿼리 데이터 수에 따라 비용이 부과되는 특징이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103477125-d1186180-4dfe-11eb-9b99-e5c00bb8cf52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;햄버거 버튼 - 빅데이터 - BigQuery에 접근하여 데이터 세트와 테이블을 생성 해줍니다.여기서 데이터 세트는 상용 RDBMS의 데이터베이스(스키마)에 해당하고, 테이블은 동일합니다. 테이블 스키마는 위와 같이 생성해줍니다.&lt;/p&gt;

&lt;h1 id=&quot;cloud-functions-설정&quot;&gt;Cloud Functions 설정&lt;/h1&gt;

&lt;p&gt;GCP Cloud Functions는 특정 요청이 들어올 경우 정의된 함수를 실행시켜주는 기능입니다. 이번 실습에서는 Pub/Sub에 데이터가 들어오면 해당 데이터를 BigQuery에 정의된 테이블로 insert하는 함수입니다.&lt;/p&gt;

&lt;p&gt;1.구성&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103477893-6cf99b80-4e06-11eb-873a-5888d7315589.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pub/Sub의 twitter Topic - Cloud 함수 트리거에 접근합니다. Topic을 경유해서 Cloud Functions를 생성했기 때문에 트리거 유형과 주제 유형은 원하는대로 설정되어 있으니 그대로 저장 후 다음으로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;2.코드&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103477873-3e7bc080-4e06-11eb-8c62-bc507051d891.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;런타임은 Python 3.7 진입점은 기존 코드를 활용할 것이니 그대로 유지합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# main.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.cloud&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigquery&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tweets_to_bq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dataset_ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'twitter_data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# BigQuery 데이터 세트
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;table_ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'twitter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# BigQuery 테이블
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;tweet_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows_to_insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweet_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'created_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweet_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows_to_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_pubsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Triggered from a message on a Cloud Pub/Sub topic.
    Args:
         event (dict): Event payload.
         context (google.cloud.functions.Context): Metadata for the event.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pubsub_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pubsub_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tweets_to_bq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pubsub_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;requirements.txt에는 함수 실행에 필요한 패키지를 적어줍니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# requirements.txt
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigquery&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;python-코드-작성&quot;&gt;Python 코드 작성&lt;/h1&gt;

&lt;p&gt;이번 실습에서는 Twitter API와 GCP 서비스들과 상호작용 하기위해 Python 코드를 사용합니다. 코드를 작성하기에 앞서 이전에 발급받은 Tiwtter API Key와 Access Token에 대한 정보를 환경변수로 작성합니다. 또한 GCP 계정 설정과정에서 발급한 서비스 계정에 대한 JSON 타입의 비공개 키 또한 Python 파일과 동일한 디렉토리에 위치시킵니다.&lt;/p&gt;

&lt;p&gt;1.Twitter API, Access ToKen, GCP SA Credentials 환경변수 설정&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .zshrc (혹은 .bashrc) 안에서 작성&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./twitter-300412-3f24e09c59ef.json&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TWITTER_API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TWITTER API KEY&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TWITTER_API_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TWITTER API SECRET KEY&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TWITTER_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TWITTER ACCESS TOKEN&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TWITTER_ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TWITTER ACCESS TOKEN SECRET&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.Python 코드 작성&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tweepy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.cloud&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubsub_v1&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.oauth2&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_account&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# GCP 서비스 계정 비공개 키
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GOOGLE_APPLICATION_CREDENTIALS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# GCP 계정 인증
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_service_account_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.googleapis.com/auth/cloud-platform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Pub/Sub 인증
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubsub_v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublisherClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Pub/Sub Topic 지정 (프로젝트 ID, Topic)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'twitter-300412'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'twitter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Twitter API Key / Access Token
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitter_api_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TWITTER_API'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;twitter_api_secret_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TWITTER_API_SECRET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;twitter_access_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TWITTER_ACCESS_TOKEN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;twitter_access_token_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TWITTER_ACCESS_TOKEN_SECRET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# json 파일은 BigQuery에서 생성한 테이블의 스키마 정보와 일치하게 작성 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleStreamListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# status가 실제로 받는 데이터 객체이므로, BigQuery에서 생성한 테이블의 스키마 정보에 맞춰 파일 생성
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'created_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;420&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream_listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleStreamListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Twitter API 계정 및 액세스 인증
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OAuthHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitter_api_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twitter_api_secret_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitter_access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twitter_access_token_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# tweepy.Stream 객체 선언
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitterStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream_listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 특정 주제어가 포함된 Tweets Streaming
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitterStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 Python과 Twitter API와 GCP 서비스와 상호작용하기 위한 패키지를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tweepy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;3.8.0 google-cloud-pubsub&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103477806-7b938300-4e05-11eb-934a-4f0dfb0862e8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 파이썬 파일을 실행하면 다음과 같이 실시간 Tweets 데이터들을 확인할 수 있습니다. 이 데이터들이 Pub/Sub의 twitter Topic로 스트리밍 되면서 동시에 Cloud Functions에 정의된 함수에 의해 BigQuery로 데이터가 들어가고 있는것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103478229-62400600-4e08-11eb-9d63-88440a706e43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BigQuery에서 쿼리를 조회해보면 테이블에 정의된 스키마에 맞춰 데이터가 적재되고 있음을 확인할 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;gke에-컨테이너-배포&quot;&gt;GKE에 컨테이너 배포&lt;/h1&gt;

&lt;p&gt;이제 위 Python 코드를 Docker Container로 말아서 최종적으로 GKE에 배포하여 무인으로 동작하게 할 것입니다.&lt;/p&gt;

&lt;p&gt;1.Dockerfile 작성&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Base Image 설정&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; python:3.7-slim&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Working Directory 설정&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 실행에 필요한  파일 복사&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## Twitter.py / GCP SA Key.json / requirements.txt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 패키지 설치&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--trusted-host&lt;/span&gt; pypi.python.org &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt

&lt;span class=&quot;c&quot;&gt;# 환경변수 설정&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; GOOGLE_APPLICATION_CREDENTIALS=&quot;./twitter-300412-3f24e09c59ef.json&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; TWITTER_API=&quot;TWITTER API KEY&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; TWITTER_API_SECRET=&quot;TWITTER API SECRET KEY&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; TWITTER_ACCESS_TOKEN=&quot;TWITTER ACCESS TOKEN&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; TWITTER_ACCESS_TOKEN_SECRET=&quot;TWITTER ACCESS TOKEN SECRET&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;python&quot;, &quot;Twitter.py&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 Dockerfile을 작성하고, 아래 명령어로 Docker Image를 빌드합니다. 약 1-2분 후 완료되면 정상적으로 빌드되었는지 확인합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 약 1-2분 소요&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; twitter &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.Google cloud SDK gcloud 설치&lt;/p&gt;

&lt;p&gt;GCP는 CLI 환경에서 서비스를 이용할 수 있도록 &lt;a href=&quot;https://cloud.google.com/sdk/docs/downloads-versioned-archives?hl=ko&quot;&gt;gcloud&lt;/a&gt;라는 자체 SDK를 제공합니다. 수월한 GKE 구축을 위해 다음과 같이 gcloud를 설치합니다.&lt;/p&gt;

&lt;p&gt;먼저 아래 명령어로 OS (32/64)비트 버전을 확인하고 패키지를 설치하여 압축을 풀어줍니다. (아래 명령어는 Mac OS를 기준으로 합니다.) 다른 OS의 경우 &lt;a href=&quot;https://cloud.google.com/sdk/docs/downloads-versioned-archives?hl=ko&quot;&gt;gcloud&lt;/a&gt;에서 해당되는 OS용 패키지를 다운 받으시면 됩니다.&lt;/p&gt;

&lt;p&gt;압축 해제가 완료되면 install.sh 파일을 실행시켜 안내에따라 설치를 진행합니다. 이 과정에는 사용하고자 하는 Google 계정의 인증과 프로젝트를 설정하는 과정이 포함되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;getconf LONG_BIT
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-320.0.0-darwin-x86_64.tar.gz?hl&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ko
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvzf&lt;/span&gt; google-cloud-sdk-320.0.0-darwin-x86_64.tar.gz&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ko
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;google-cloud-sdk/ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./install.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.GCP Container Registry에 Docker Image Push&lt;/p&gt;

&lt;p&gt;GCP에서는 자사 서비스에서 Container가 빠르게 배포될 수 있도록 개인 Container Registry를 제공합니다. 아래 명령어로 Docker Image에 태그를 붙이고, Container Registry에 Push한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ docker tag 이미지:태그 gcr.io/프로젝트 ID/이미지:태그&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag twitter gcr.io/twitter-300412/twitter
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud auth configure-docker &lt;span class=&quot;c&quot;&gt;# 인증된 Docker 구성&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push gcr.io/twitter-300412/twitter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.GKE에 배포&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103479422-d8e10180-4e10-11eb-8cde-a7a43ab461e8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;햄버거 버튼 - 도구 - Container Registry에 접근하면 위와 같이 Local에서 Push한 Image가 올라온 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103479539-b13e6900-4e11-11eb-93f7-962021551a03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 이미지에 들어가서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GKE에 배포&lt;/code&gt;를 통해 기존 컨테이너 이미지로 배포를 시작하면 약 5분 정도 기다리면 배포가 완료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103479759-30806c80-4e13-11eb-8cfc-de75a492f8ae.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;손쉽게 GKE 클러스터가 생성되고 우리가 배포한 컨테이너도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx-1-f7f74655b-xkrml&lt;/code&gt;라는 Pod로써 안정적으로 작동되고 있습니다. 이제 GKE에 의해 Twitter API로 Twitter Streaming를 요청하여 Pub/Sub과 BigQuery로 전송하는 일련의 과정들이 자동으로 수행되고 있습니다. 즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;라는 키워드가 포함된 Tweets 데이터가 자동으로 수집되는 데이터 파이프라인이 완성된 것입니다.&lt;/p&gt;

&lt;h1 id=&quot;google-studio로-연결&quot;&gt;Google Studio로 연결&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103480193-3c216280-4e16-11eb-96c6-f4f64d867929.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Google Studio에서 보고서 작성을 하면 다른 Google 서비스와 연결 여부를 물어본다. 이때 이전에 생성한 BigQuery의 테이블과 연결하면 바로 데이터를 연결하여 간단한 시각화가 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103480234-72f77880-4e16-11eb-9e72-8eae3d92937a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103449597-aa1e3a80-4ced-11eb-8c6b-592cbe5f8a67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 글은 2020.09.23(목)에 진행된 제81차 토크ON세미나에서 SOCAR의 김상우님이 강의해주신 내용을 토대로 리마인드 차원에서 작성한 것입니다. Hands-on 강의 동영상과 함께 실습을 진행해보고자 한다면 &lt;a href=&quot;https://tacademy.skplanet.com/frontMain.action&quot;&gt;T Academy&lt;/a&gt;에서 회원가입 후 &lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=187#sec2&quot;&gt;데이터 엔지니어링 기초&lt;/a&gt; 강좌에 수강신청하여 진행해보실 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=187#sec2&quot;&gt;T Academy - 데이터 엔지니어링 기초&lt;/a&gt;&lt;/p&gt;</content><author><name>김인규</name></author><category term="Data Engineering" /><category term="Pub/Sub" /><category term="Cloud Function" /><category term="BigQuery" /><category term="GKE" /><summary type="html">Twitter Streaming Data를 이용한 GCP Pipeline을 구축해본다.</summary></entry><entry><title type="html">파이썬 접근 제어자에 대하여</title><link href="/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" rel="alternate" type="text/html" title="파이썬 접근 제어자에 대하여" /><published>2020-12-31T00:00:00+09:00</published><updated>2020-12-31T00:00:00+09:00</updated><id>/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC</id><content type="html" xml:base="/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4%EC%9E%90%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/">&lt;h1 id=&quot;접근-제어자&quot;&gt;접근 제어자&lt;/h1&gt;

&lt;p&gt;객체지향 기반 프로그래밍에서는 &lt;strong&gt;접근 제어자&lt;/strong&gt; 즉, &lt;strong&gt;private&lt;/strong&gt;, &lt;strong&gt;protected&lt;/strong&gt;, &lt;strong&gt;public&lt;/strong&gt;을 이용한 &lt;strong&gt;정보 은닉&lt;/strong&gt;을 통해 외부로부터 데이터를 보호한다. 이를 통해 객체의 속성과 메소드를 하나로 묶고, 실제 구현 내용의 일부는 외부에 감추어 은닉할 수 있는 &lt;strong&gt;캡슐화&lt;/strong&gt;가 가능한다. 각각의 접근 제어자는 다음과 같은 의미를 가진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103396288-ad8eb600-4b75-11eb-98d3-2a55798e6fed.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;접근 제어자&lt;/th&gt;
      &lt;th&gt;문법&lt;/th&gt;
      &lt;th&gt;의미&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Public&lt;/td&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;외부로부터 모든 접근 허용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Protected&lt;/td&gt;
      &lt;td&gt;_name&lt;/td&gt;
      &lt;td&gt;자기 클래스 내부 혹은 상속받은 자식 클래스에서만 접근 허용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Private&lt;/td&gt;
      &lt;td&gt;__name&lt;/td&gt;
      &lt;td&gt;자기 클래스 내부의 메서드에서만 접근 허용&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;예제&quot;&gt;예제&lt;/h1&gt;

&lt;h2 id=&quot;public&quot;&gt;Public&lt;/h2&gt;

&lt;p&gt;공개적으로 모든 함수, 변수, 메소드를 공개적으로 사용할 수 있다. 즉, 다른 모든 클래스는 제한없이 쉽게 액세스 할 수 있다. Public Member는 일반적으로 클래스 외부에서 액세스 할 수있는 클래스에서 선언 된 메소드며 모든 일반 클래스는 기본적으로 Public 클래스다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## 원 넓이 클래스
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'500원 동전'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;원&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;동전&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;246.49000000000004&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'50원 동전'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;원&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;동전&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;88.7364&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;protected&quot;&gt;Protected&lt;/h2&gt;

&lt;p&gt;Protected Member는 prefix로 ‘_‘를 사용하며,  Sub Class에서 사용하겠다는 의미이다. 그러나 강제성은 없으므로 Public과 거의 동일하게 외부 접근가능하다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## 학생 정보 클래스 2
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 생성자
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_roll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Roll, Branch 출력 메소드 (Protected)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_roll_branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Protected data 출력
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Roll: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Branch: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## 학생 정보 클래스 2 (Student1 상속)
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 생성자
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Student1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Name, Roll, Branch 출력 메소드
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Student1의 Protected 변수, 메소드
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_roll_branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;김인규&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;학부생&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;바이오메디컬학과&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;컴퓨터과학과&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;김인규&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;학부생&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;컴퓨터과학과&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;private&quot;&gt;Private&lt;/h2&gt;

&lt;p&gt;Private Member의 경우 변수와 함수는 클래스 내에서만 액세스 할 수 있다. 클래스를 Private으로 선언하기 위해 prefix로 “__“를 사용한다. 기본적으로 자기 클래스 외부에서 Private Member에 대한 접근은 금지된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;## 계좌 관리 클래스
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 생성자 // 초기 금액 0 (Private)
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;              

        &lt;span class=&quot;c1&quot;&gt;# 출금 메소드
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;         
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__get_balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 입금 메소드
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save_money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__get_balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 잔고 확인 메소드(Praivate)
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__get_balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__seed&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 잔고 확인 메소드(Public) // 이름 명명 시 뒤에 __가 붙게 되면 Public Member로 간주
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__get_status__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_seed&lt;/span&gt;               

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# Private Member이므로 반영 X
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__get_status__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__get_balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# Private Member이므로 ERROR!
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Account'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__get_balance'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Private Member는 Python의 Name Mangling 기능에 따라 ‘_class__name’형태로 변환된다. 즉, Sub Class에서 이름 충돌을 피하기 위한 조치로 추후 확장 시 충돌이 발생하지 않도록 사전에 방지한다. 다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir()&lt;/code&gt; 명령어를 통해 객체의 속성을 확인하면 Private Member인 ‘__get_balance’는 Name Mangling에 의해 ‘_Account__get_balance’로 변경됐다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'_Account__get_balance'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'_Account__seed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__class__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__dict__'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'get_money'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'save_money'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Account__seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# name mangled variable
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Account__get_balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# name mangled function
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 해당 속성을 통해 값을 수정하거나 호출해도 동작하는 것을 확인할 수 있다. 즉, 파이썬의 접근 제어자는 완벽한 Private 기능은 아니며, Sub Class에서 변수가 재정이되지 않도록 방지하는 성격의 기능으로 이해하는 것이 좋겠다.&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codewithharry.com/videos/python-tutorials-for-absolute-beginners-63&quot;&gt;Public, Private &amp;amp; Protected Access Specifiers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@YSR/access-modifiers-in-python-public-private-protected-fe5f923bd914&quot;&gt;Access Modifiers in Python — Public, Private, &amp;amp; Protected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/access-modifiers-in-python-public-private-and-protected/&quot;&gt;Access Modifiers in Python : Public, Private and Protected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fun-coding.org/PL&amp;amp;OOP1-5.html&quot;&gt;예제로 이해하는 객체지향 문법 (public, private, protected)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>김인규</name></author><category term="Python" /><category term="Python" /><category term="객체지향" /><category term="Class" /><summary type="html">객체지향 기반 프로그래밍에서는 접근 제어자 즉, private, protected, public을 이용한 정보 은닉을 통해 외부로부터 데이터를 보호한다.</summary></entry><entry><title type="html">파이썬 Counter 사용법</title><link href="/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-Counter-%EC%82%AC%EC%9A%A9%EB%B2%95/" rel="alternate" type="text/html" title="파이썬 Counter 사용법" /><published>2020-12-30T00:00:00+09:00</published><updated>2020-12-30T00:00:00+09:00</updated><id>/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-Counter-%EC%82%AC%EC%9A%A9%EB%B2%95</id><content type="html" xml:base="/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-Counter-%EC%82%AC%EC%9A%A9%EB%B2%95/">&lt;h1 id=&quot;완주하지-못한-선수&quot;&gt;완주하지 못한 선수&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103338570-22081d00-4ac2-11eb-9c1e-bc934b7dd499.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로그래머스 코딩테스트 연습에 완주하지 못한 선수(Lv.1)라는 문제가 있다. 여느 때와 같이 파이썬으로 문제를 풀이하는데 정확성 테스트는 모두 통과했지만 효율성 검사에서 모두 시간 초과로 실패했다. 내가 처음에 풀이했던 방식은 다음과 같다.&lt;/p&gt;

&lt;h2 id=&quot;listremove&quot;&gt;list.remove()&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103338653-6d223000-4ac2-11eb-9473-82d1ed6d6e2c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;리스트 요소를 제거하되 중복이 있을 시 최초 발견된 요소만 삭제하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.remove()&lt;/code&gt; 메소드의 특징을 이용해 풀이하려 했다. 정확성 테스트는 모두 통과했지만 역시 효율성에서 모두 시간초과로 실패한다.&lt;/p&gt;

&lt;p&gt;왜 그런가 생각해보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.remove()&lt;/code&gt;는 시간복잡도가 O(N)이고, 반복문이 한 번 들어가게 되니 O(N²)이 된다. 아마도 효율성 검사에서 O(N²)이면 실패하게 만드는 케이스가 있는 것으로 추정된다.&lt;/p&gt;

&lt;h2 id=&quot;listsort&quot;&gt;list.sort()&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103339676-592bfd80-4ac5-11eb-84da-625403ecc65d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.sort()&lt;/code&gt; 메소드를 이용해 정렬하고, 같은 인덱스를 기준으로 비교하면서 다른 요소가 나올 때까지 비교해 구하는 방식으로 풀었더니 정확성과 효율성 모두 통과할 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;collectionscounter&quot;&gt;collections.Counter()&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103340597-c5a7fc00-4ac7-11eb-98dd-022872c51bde.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collections.Counter()&lt;/code&gt; 메소드는 iterable 객체 즉, list, dict, set, str, bytes, tuple, range와 같은 반복 가능한 객체의 요소를 카운트하여 각각의 빈도 값을 {요소:빈도} 형태인 해쉬 테이블형태(카운터 객체)로 반환한다.&lt;/p&gt;

&lt;p&gt;이 문제를 풀면서 나름 꽤를 생각해내다가 리스트나 딕셔너리 객체도 뺄셈 연산이 되면 좋겠다 생각했다. 안타깝게도 리스트나 딕셔너리를 뺄셈 연산을 지원하지 않지만, 카운터 객체는 추가적인 연산을 지원한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Counter({'a': 3, 'b': 1})
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Counter({'a': 1, 'b': 2})
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;                       
&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;                       
&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;# intersection:  min(c[x], d[x]) 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;# union:  max(c[x], d[x])
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 외에도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collections.Counter()&lt;/code&gt; 메소드는 자연어 처리 시 Word Count를 쉽게 나타낼 수 있고, 심지어 시간복잡도는 O(N)으로 속도도 빠르다. 앞으로도 다양한 상황에서 잘 써먹을 수 있을 것 같다 😋&lt;/p&gt;

&lt;h1 id=&quot;counter-객체&quot;&gt;Counter() 객체&lt;/h1&gt;

&lt;h2 id=&quot;생성&quot;&gt;생성&lt;/h2&gt;

&lt;p&gt;Counter() 객체를 생성하는 방법은 다음과 같다. count는 0 이하의 음수도 될 수 있으며, dictionary와 같은 구조를 가진다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;# 빈 카운터 객체 생성
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abbcccdddd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# iterable 객체로부터 생성
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'two'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# mapping을 통해 생성
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'two'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dogs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# 매개변수를 통해 생성 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dogs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cats'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한, 3 가지 메소드를 통해 필요한 연산을 지원한다.&lt;/p&gt;

&lt;h2 id=&quot;메소드&quot;&gt;메소드&lt;/h2&gt;

&lt;h3 id=&quot;counterelements&quot;&gt;Counter.elements()&lt;/h3&gt;

&lt;p&gt;Counter 객체의 정보에 따른 리스트 반환 (양수만)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;countermost_commonn&quot;&gt;Counter.most_common([n])&lt;/h3&gt;

&lt;p&gt;Counter 객체의 count의 빈도 상위 n개의 값 반환하는 메소드&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abracadabra'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;counterupdate&quot;&gt;Counter.update()&lt;/h3&gt;

&lt;p&gt;Counter 객체에 대하여 다른 mapping 및 Counter 객체 정보를 덧셈 연산하는 메소드&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;countersubstract&quot;&gt;Counter.substract()&lt;/h3&gt;

&lt;p&gt;Counter 객체에 대하여 다른 mapping 및 Counter 객체 정보를 뺄셈 연산하는 메소드&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;기타&quot;&gt;기타&lt;/h3&gt;

&lt;p&gt;이외에도 Counter 객체는 딕셔너리와 유사한 메소드를 지원한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;# count 값 리스트로 반환
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# (element, count) 값 튜플로 반환
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# count 값 모두 리셋 (빈 카운터 객체 반환)
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;# element 값 list로 반환
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c1&quot;&gt;# element 값 set으로 반환
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;# {element, count} 값 딕셔너리로 반환
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;                                  &lt;span class=&quot;c1&quot;&gt;# count 값이 양수 값에 해당하는 쌍만 반환
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.Counter&quot;&gt;collections Container datatypes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>김인규</name></author><category term="Python" /><category term="Python" /><category term="Counter" /><category term="collections" /><summary type="html">파이썬 collections 패키지의 Counter() 메소드 사용법과 활용사례를 소개한다.</summary></entry><entry><title type="html">Vi 사용법 완벽 가이드</title><link href="/etc/Vi-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C/" rel="alternate" type="text/html" title="Vi 사용법 완벽 가이드" /><published>2020-12-28T00:00:00+09:00</published><updated>2020-12-28T00:00:00+09:00</updated><id>/etc/Vi-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C</id><content type="html" xml:base="/etc/Vi-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C/">&lt;h1 id=&quot;vi이란-&quot;&gt;Vi이란 ?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103211968-f7e11e80-494c-11eb-83fd-06d64ed07917.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Photo by Luca Bravo on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Linux나 Unix 유저라면 한 번쯤은 vi editor를 사용해본 경험이 있을 것이다. vi editor란 Unix-like 운영체제 용으로 만든 텍스트 편집기를 말한다. Vi와 더불어 Vi IMproved의 약자인 Vim이라는 기존 vi editor의 성능을 개선한 확장판이 있다. 이 editor들은 터미널에서 바로 파일에 접근하여 내용을 수정할 수 있어 주로 서버, 인프라 엔지니어들이 자주 사용하는 편집기로 대부분의 Linux, Unix OS에 기본 editor로 설치되어 있다.&lt;/p&gt;

&lt;p&gt;vi는 라인 편집기 개념에 기반하여 GUI에 익숙한 사용자들이 처음 이 편집기를 접하는 사람들은 상당히 괴랄한 사용법에 혀를 내두르곤 한다. 사용법을 모르면 입력이 되지 않아 키보드나 컴퓨터가 고장났다고 생각할 수도 있고, 해당 화면을 빠져나오지 못해 곤경에 처할 수도 있다. 이처럼 꽤 높은 진입장벽이 있는 툴임에도 불구하고 나름 전통있는 IDE로서 개발자 친화적인 다양한 단축키를 제공하고 있어서 꽤 두터운 마니아층을 보유하고 있다. 그래서 Visual Studio나 PyCharm과 같이 편집방식으로 vi 인터페이스를 제공하는 IDE들이 많다.&lt;/p&gt;

&lt;p&gt;최근 데이터 플랫폼 공부를 하면서 부쩍 vi를 사용할 일들이 많아졌다. vi의 최대 장점은 터미널에서 바로 파일에 접근하여 수정할 수 있다는 점이 아닐까 싶다. 특히 yaml이나 config 파일을 수정할 때 vi로 바로 접근해서 필요한 부분을 고칠 때 유용하다. XWindow가 마련된 환경이면 다른 IDE를 통해 수정할 수도 있겠지만 매번 파일 불러오는 것도 번거로운 작업일 뿐더러, 오롯이 CLI 환경만 제공되는 서버라고 한다면 vi는 최선의 선택이 될 수 밖에 없다. 데이터 인프라를 구축할 때에도 대부분 서버에서 작업이 이뤄지기 때문에 vi 사용에 능숙해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103214143-06cacf80-4953-11eb-90be-fb6d0a0c8748.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;vi을 재밌게 익혀보고자 한다면 여기 &lt;a href=&quot;https://vim-adventures.com&quot;&gt;VIM Adventures&lt;/a&gt;라는 Vim 단축키를 이용한 튜토리얼 게임이 있다.&lt;/p&gt;

&lt;h1 id=&quot;사용법&quot;&gt;사용법&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103212636-b0f42880-494e-11eb-816b-027ddbc8905d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;출처 Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;vi editor는 모든 기능이 영문 키보드 안에 집중되어 있다. 심지어 화살표 키 마저도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hjkl&lt;/code&gt;가 대체하고 있어 손가락의 동선을 최소화 한다. 그래서 vi 매니아 층을 겨냥한 해피해킹과 같이 아예 방향키가 없는 키맵을 가진 키보드도 있다. 이렇게 매니아 층이 두터운 이유는 vi에 숙달되면 매우 강력한 편집기로써 사용할 수 있기 때문이다. 하지만 숙달되기까지 꽤 오랜 시간이 걸린다는 점은 가장 큰 단점이다.&lt;/p&gt;

&lt;p&gt;vi는 기본적으로 편집이 제한된 Command Mode로 시작한다. 여기서 내용을 수정하기 위해서는 다음 명령어를 통해 Insert Mode로 전환하여야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; : 커서 다음(오른쪽)에 입력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; : 행 마지막 부분에 입력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; : 커서 앞(왼쪽)에 입력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt; : 행 처음 부분에 입력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt; : 커서 밑에 빈 행을 추가하여 입력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt; : 커서 위에 빈 행을 추가하여 입력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; : 커서에 있는 글자를 지우고 입력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Insert Mode로 전환하고 나서야 비로소 편집이 가능하며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esc&lt;/code&gt; 키를 통해 다시 Command Mode로 돌아갈 수 있다. 또한 Command Mode에서는 다음과 같은 기본적인 명령을 지원한다.&lt;/p&gt;

&lt;h2 id=&quot;이동&quot;&gt;이동&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt; : 왼쪽 방향키&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; : 아래쪽 방향키&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; : 위쪽 방향키&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt; : 오른쪽 방향키&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; : 다음 단어의 첫 글자로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; : 이전 단어의 첫 글자로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt; : 행의 첫 글자로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; : 행의 마지막 글자로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gg&lt;/code&gt; : 처음 행으로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G&lt;/code&gt; : 마지막 행으로 가기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt; : 이전 문장으로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt; : 다음 문장으로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; : 이전 문단으로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt; : 다음 문단으로 이동&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; : 오른쪽으로 들여쓰기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; : 들여쓰기 해제&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;삭제&quot;&gt;삭제&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; : 커서 다음 글자 잘라내기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; : 커서가 위치한 행 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dw&lt;/code&gt; : 커서 포함 해당 단어 끝까지 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; : 커서 미포함 해당 단어 시작까지 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d0&lt;/code&gt; : 커서 미포함 행 시작까지 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d$&lt;/code&gt; : 커서 포함 행 끝까지 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dgg&lt;/code&gt; : 커서가 위치한 행 포함 문서 첫 행까지 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dG&lt;/code&gt; : 커서가 위치한 행 포함 문서 마지막 행까지 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;복사&quot;&gt;복사&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yy&lt;/code&gt; : 커서가 위치한 행 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yw&lt;/code&gt; : 커서 포함 해당 단어 끝까지 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yb&lt;/code&gt; : 커서 미포함 해당 단어 시작까지 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y0&lt;/code&gt; : 커서 미포함 행 시작까지 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y$&lt;/code&gt; : 커서 포함 행 끝까지 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ygg&lt;/code&gt; : 커서가 위치한 행 포함 문서 첫 행까지 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yG&lt;/code&gt; : 커서가 위치한 행 포함 문서 마지막 행까지 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; : 커서 다음에 붙여넣기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; : 커서 이전에 붙여넣기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;visual-mode&quot;&gt;Visual Mode&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; : 문자열 단위로 선택 가능한 Visual Mode로 전환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; : 문장 단위로 선택 가능한 Visual Line Mode로 전환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt; : 선택 영역 대/소문자 전환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; : 선택 영역 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; : 선택 영역 삭제 후 Insert Mode로 전환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; : 선택 영역 복사&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esc&lt;/code&gt; : Visual (Line) Mode 해제&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;북마크&quot;&gt;북마크&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m{a-zA-Z}&lt;/code&gt; : 해당 커서를 북마크로 설정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:marks&lt;/code&gt; : 북마크 리스트 확인&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;₩{a-zA-Z}&lt;/code&gt; : 기록된 북마크로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기타&quot;&gt;기타&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r{글자}&lt;/code&gt; : 커서에 위치한 글자 대체&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt; : 글자 대체모드&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/문자열&lt;/code&gt; : 앞에서부터 문자열 찾기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?문자열&lt;/code&gt; : 뒤에서부터 문자열 찾기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; : 다음 검색결과&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; : 이전 검색결과&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s/old/new&lt;/code&gt; : 각 행의 처음 나오는 old를 new로 치환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%/old/new/g&lt;/code&gt; : 문서 내 모든 old를 new로 치환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%/old/new/gc&lt;/code&gt; : 문서 내 모든 old를 new로 치환하되 각 old마다 치환할 것인지 물음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt; : 이전으로 되돌리기 (Undo)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + r&lt;/code&gt; : 되돌린 작업 재실행 (Redo)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZZ&lt;/code&gt; : 저장 후 종료 (= &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZQ&lt;/code&gt; : 강제 종료 (= &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;🍯 정보:&lt;/strong&gt; 위 명령어 앞에 숫자와 함께 사용하면 같이 입력된 숫자만큼 해당 명령어가 실행된다. 예를 들어, 3yy는 커서가 위치한 행을 포함하여 아래 3줄까지 복사가 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또한 Command Mode에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; 키와 함께 다음과 같은 기본적인 명령을 지원한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt; : 종료 (아무런 수정이 일어나지 않아야 가능)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt;: 강제종료&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt; : 저장&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;: 저장 후 종료&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:syntax on&lt;/code&gt; : 문법 강조효과&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:set number&lt;/code&gt; : 행 번호 보이기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:set nonumber&lt;/code&gt; : 행 번호 숨기기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:cd&lt;/code&gt; : 현재 디렉토리 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:terminal&lt;/code&gt; : 분할 화면으로 터미널 창 띄우기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;추가예정&quot;&gt;추가예정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Vim Plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vi&quot;&gt;Wikipedia vi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.maketecheasier.com/cheatsheet/vim-keyboard-shortcuts/&quot;&gt;VIM Keyboard Shortcuts Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>김인규</name></author><category term="Etc" /><category term="Vim" /><category term="단축키" /><summary type="html">Linux나 Unix 유저라면 한 번쯤은 vi editor를 사용해본 경험이 있을 것이다. vi editor란 Unix-like 운영체제 용으로 만든 텍스트 편집기를 말한다. Vi와 더불어 Vi IMproved의 약자인 Vim이라는 기존 vi editor의 성능을 개선한 확장판이 있다.</summary></entry><entry><title type="html">파이썬 리스트 복사하기</title><link href="/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%B5%EC%82%AC/" rel="alternate" type="text/html" title="파이썬 리스트 복사하기" /><published>2020-12-27T00:00:00+09:00</published><updated>2020-12-27T00:00:00+09:00</updated><id>/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%B5%EC%82%AC</id><content type="html" xml:base="/python/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%B5%EC%82%AC/">&lt;h1 id=&quot;파이썬-리스트-복사-어떻게-할까&quot;&gt;파이썬 리스트 복사 어떻게 할까?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103172222-58ad2000-4895-11eb-8b48-af1a20a62d1d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Photo by Zdeněk Macháček on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;오늘은 상당히 기초적이면서도 쉽게 실수 할 수 있는 부분을 다뤄보고자 한다. 바로 나를 포함한 초보자들이 실수할 수 있는 파이썬 리스트를 다른 리스트에 복사하는 방법이다.&lt;/p&gt;

&lt;h2 id=&quot;그냥-새로운-변수에-정의해주면-되는거-아냐-&quot;&gt;그냥 새로운 변수에 정의해주면 되는거 아냐 🤔❓&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; list2 = list1

&amp;gt;&amp;gt;&amp;gt; print(list1)
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; print(list2)
[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예제의 결과만 보면 파이썬이 워낙 간편하다보니 별 의심없이 잘 복사됐다고 생각할 수 있다. 하지만 정확히 말하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list2&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list1&lt;/code&gt;의 메모리 주소값을 복사한 것이다. 즉, 같은 메모리를 참조하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list1&lt;/code&gt;이 수정되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list2&lt;/code&gt;도 동시에 수정된다. 하지만 이것을 간과하고 열심히 코드를 짜다보면 나중에 깊은 오류의 구렁텅이에 빠질 수 있다. 혹시나 그런 오류에 빠진 사람들이 이 글을 보고 도움이 되었으면 좋겠다 :)&lt;/p&gt;

&lt;h2 id=&quot;아니-이게-왜-안돼-&quot;&gt;아니 이게 왜 안돼 🐥❓&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; list2 = list1

&amp;gt;&amp;gt;&amp;gt; print('list1 :', list1, '/ id :', id(list1))
list1 : [1, 2, 3, 4] / id : 4552076160
&amp;gt;&amp;gt;&amp;gt; print('list2 :', list2, '/ id :', id(list2))
list2 : [1, 2, 3, 4] / id : 4552076160

&amp;gt;&amp;gt;&amp;gt; list1[0] = 11

&amp;gt;&amp;gt;&amp;gt; print('list1 :', list1)
list1 : [11, 2, 3, 4] 
&amp;gt;&amp;gt;&amp;gt; print('list2 :', list2)
list2 : [11, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103172728-cad33400-4898-11eb-9756-85ffe931a999.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파이썬 객체의 메모리 주소를 확인하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id()&lt;/code&gt; 함수를 이용해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list1&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list2&lt;/code&gt;의 주소값을 확인해보면 두 리스트 모두 4552076160로 같은 주소값을 가지는 것을 확인할 수 있다. 엄밀히 말해서 list2는 list1의 분신과 같은 존재이고, 일반적으로 우리가 원하는 복사는 이뤄지지 않은 것이다.&lt;/p&gt;

&lt;h2 id=&quot;그럼-어떻게-해야-하는데-&quot;&gt;그럼 어떻게 해야 하는데 😲❓&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103172734-d4f53280-4898-11eb-8630-f6b9dd23b2ca.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞서 살펴본 문제점과 같이 우리가 원하는 복사가 이뤄지지 않았던 이유는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list1&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list2&lt;/code&gt; 두 변수가 같은 메모리를 참조하기 때문이다. 결국 우리가 원하는 복사가 이뤄지기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list1&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list2&lt;/code&gt;이 서로 다른 메모리를 참조하도록 해주면 된다. 파이썬 리스트를 다른 리스트에 복사하는 방법은 4가지가 있다.&lt;/p&gt;

&lt;h3 id=&quot;1-슬라이싱&quot;&gt;1) 슬라이싱&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; list2 = list1[:]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;시작점과 끝점을 생략한 슬라이싱은 리스트의 모든 요소를 뜻한다. 슬라이싱을 통해 변수를 정의하면 파이썬은 새로운 객체를 만든다.&lt;/p&gt;

&lt;h3 id=&quot;2-list-함수&quot;&gt;2) list() 함수&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; list2 = list(list1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬 내장함수 중에는 iterable한 객체를 리스트 객체로 변환해주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list()&lt;/code&gt; 함수가 있다. 이 함수를 이용해 복사하고자 하는 리스트 객체를 다시 재선언 한다.&lt;/p&gt;

&lt;h3 id=&quot;3-copy-메소드&quot;&gt;3) copy() 메소드&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; list2 = list1.copy()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python3 부터 리스트를 다른 리스트에 복사하는 기능인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy()&lt;/code&gt; 메소드가 추가되었다. 가독성을 위한 코드라면 이 방법을 사용하는 것을 권장한다.&lt;/p&gt;

&lt;h3 id=&quot;4-리스트-연산&quot;&gt;4) 리스트 연산&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list1 = [1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; list2 = [] + list1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;리스트 덧셈연산을 이용해 새로운 빈 리스트에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list1&lt;/code&gt;의 요소들을 더한다. 새로운 리스트 객체에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list1&lt;/code&gt;의 요소들이 더해져 결과적으로 우리가 원하는 복사가 이뤄진다.&lt;/p&gt;

&lt;h2 id=&quot;검증&quot;&gt;검증&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def copy_element(method):
        list1 = [1, 2, 3, 4]
        if method == 1:
            list2 = list1[:]
        elif method == 2:
            list2 = list(list1)
        elif method == 3:
            list2 = list1.copy()
        elif method == 4:
            list2 = [] + list1

        print(f'방법 {method}')
        print('list1 :', list1, '/ id :', id(list1))
        print('list2 :', list2, '/ id :', id(list2))

        list1[0] = 11

        print('list1 :', list1)
        print('list2 :', list2)
        print('')

&amp;gt;&amp;gt;&amp;gt; [copy_element(method) for method in range(1, 5)]
방법 1
list1 : [1, 2, 3, 4] / id : 4552075648
list2 : [1, 2, 3, 4] / id : 4552076096
list1 : [11, 2, 3, 4]
list2 : [1, 2, 3, 4]

방법 2
list1 : [1, 2, 3, 4] / id : 4552076096
list2 : [1, 2, 3, 4] / id : 4552164288
list1 : [11, 2, 3, 4]
list2 : [1, 2, 3, 4]

방법 3
list1 : [1, 2, 3, 4] / id : 4552164288
list2 : [1, 2, 3, 4] / id : 4552076096
list1 : [11, 2, 3, 4]
list2 : [1, 2, 3, 4]

방법 4
list1 : [1, 2, 3, 4] / id : 4552076096
list2 : [1, 2, 3, 4] / id : 4552075648
list1 : [11, 2, 3, 4]
list2 : [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각자의 방법 모두 서로 다른 리스트 객체에 값이 할당되며, list1의 요소에 수정이 일어나도 list2 요소에 영향을 끼치지 않는 독립적인 개체임을 확인할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.afternerd.com/blog/python-copy-list/&quot;&gt;Python: How to Copy a List? (The Idiomatic Way)&lt;/a&gt;&lt;/p&gt;</content><author><name>김인규</name></author><category term="Python" /><category term="Python" /><category term="자료구조" /><category term="리스트" /><summary type="html">오늘은 상당히 기초적이면서도 쉽게 실수 할 수 있는 부분을 다뤄보고자 한다. 바로 나를 포함한 초보자들이 실수할 수 있는 파이썬 리스트를 다른 리스트에 복사하는 방법에 대해 소개한다.</summary></entry><entry><title type="html">AWS EKS 클러스터에 Kubeflow 설치하기</title><link href="/kubernetes/AWS-EKS-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-Kubeflow-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="AWS EKS 클러스터에 Kubeflow 설치하기" /><published>2020-12-25T00:00:00+09:00</published><updated>2020-12-25T00:00:00+09:00</updated><id>/kubernetes/AWS-EKS-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-Kubeflow-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</id><content type="html" xml:base="/kubernetes/AWS-EKS-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-Kubeflow-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/">&lt;p&gt;이번에는 지난 엔코아 데이터과학자 양성과정에서 진행한 서울특별시 공공자전거 따릉이 잔여대수 예측 프로젝트를 진행하면서 사용했던 Kubeflow라는 툴에 대해 소개하고자 한다.&lt;/p&gt;

&lt;p&gt;프로젝트의 대략적인 아키텍쳐는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103115141-cfcf9200-46a4-11eb-888e-ceeacfa4bd38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EC2 기반 AWS EKS 클러스터&lt;/li&gt;
  &lt;li&gt;AWS Aurora (PostgreSQL)&lt;/li&gt;
  &lt;li&gt;공공데이터 실시간 API 수집 및 웹 스크래핑 서버&lt;/li&gt;
  &lt;li&gt;시각화 데이터 Elasticsearch에 적재&lt;/li&gt;
  &lt;li&gt;위 모든 과정을 포함한 ML 모델링까지 Kubeflow Pipeline으로 자동화&lt;/li&gt;
  &lt;li&gt;Kibana 실시간 대시보드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;운 좋게도 학원 측에서 AWS 크레딧을 지원받아 AWS 환경에서 구축해 볼 수 있었다. 따라서 이번 포스팅은 AWS EKS 기준으로 Kubeflow 설치 방법을 소개한다.&lt;/p&gt;

&lt;h1 id=&quot;kubeflow란-&quot;&gt;Kubeflow란 ?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103114462-fc35df00-46a1-11eb-96da-776017192c9b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;공식 문서에서는 Kubeflow를 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kubeflow 프로젝트는 새로운 서비스를 다시 만드는 것이 아닌 ML을 위한 동급 최고의 오픈소스 시스템을 다양한 인프라에 배포하는 간단한 방법을 제공합니다. ML Workfow를 Kubernetes에 간단하게 이식하여 확장성과 배포 용이성을 보장하는 데 전념합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103115552-65b7ec80-46a6-11eb-86a0-a4fb31a21255.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구글 내부 프로젝트에서 시작되어 2018년 3월 오픈소스로 공개됨&lt;/li&gt;
  &lt;li&gt;2020.12.25 기준 약 9,700 GitHub Star, Release v1.2.0&lt;/li&gt;
  &lt;li&gt;KFServing, Jupyter Notebooks, MXNet, Tensorflow, PyTorch, XGBoost, Katib 등 다양한 프레임워크 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103115087-9d259980-46a4-11eb-8444-e2191b03bdc6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;공식 문서에 따르면 사용자의 상황에 따른 설치 가이드를 제시한다. 위에 언급했듯이 마침 클라우드 환경이 제공되어 이번 포스팅에서는 AWS EKS에 배포하는 방법으로 설명한다.&lt;/p&gt;

&lt;h2 id=&quot;eks-클러스터-구축&quot;&gt;EKS 클러스터 구축&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AWS EKS&lt;/strong&gt;는 Kubernetes 컨트롤 플레인 또는 노드 설치를 쉽게 도와주는 서비스로 작동 및 유지 관리할 필요 없이 AWS에서 Kubernetes를 손쉽게 실행할 수 있게 해주는 관리형 서비스다. EKS는 비정상 컨트롤 플레인 인스턴스를 자동으로 감지하고 교체하며, 자동화된 업그레이드 및 패치를 제공한다.&lt;/p&gt;

&lt;p&gt;EKS 클러스터 구축은 AWS eskworshop에서 제공하는 가이드대로 진행했다. 원활한 환경 구축을 위해 AWS CLI를 이용한 방법으로 설명한다.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;EKS 클러스터 구축을 위해 필요한 AWS CLI와 aws-iam-authenticator를 설치하고, k8s 컨트롤 플레인 제어에 필요한 kubectl과 eksctl 바이너리 파일을 설치한다.&lt;/p&gt;

&lt;h4 id=&quot;bastion-server&quot;&gt;Bastion server&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;AWS 계정 권한을 가지고 CLI 환경으로 AWS Application들을 사용하기 위한 역할&lt;/li&gt;
  &lt;li&gt;네트워크가 지원되는 어떤 컴퓨터든 상관 없고, 리소스도 최소한도만 있어도 됨. 다만, 공동 작업이 필요한 경우 다중접속이 가능해야 함&lt;/li&gt;
  &lt;li&gt;AWS의 모든 서비스 생성 권한을 가지고 있기 때문에 보안이 매우 중요&lt;/li&gt;
  &lt;li&gt;Amazon Linux AMI, Seoul region ap-northeast-2&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kubectl&quot;&gt;Kubectl&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;CLI환경에서 Kubernetes 클러스터를 구성 및 application 배포, 검사, 리소스 관리, 로그 확인 등의 기능&lt;/li&gt;
  &lt;li&gt;노드 간 마이너 버전 차이가 0.2이상 나면 오류 발생할 수 있음&lt;/li&gt;
  &lt;li&gt;예를 들어, master 노드에서 v1.18를 사용하면, 다른 노드에서는 v1.17 ~ v1.19 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.&lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl&quot;&gt;최신 Stable 버전&lt;/a&gt;을 다운로드한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -LO https://storage.googleapis.com/kubernetes-release/ release/v1.17.0/bin/linux/amd64/
$ kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.kubectl binary 파일에 실행권한을 부여한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chmod +x ./kubectl 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.kubectl binary 파일을 바이너리 폴더로 이동시킨다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mv ./kubectl /usr/local/bin/$ kubectl 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.kubectl 명령어로 버전을 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl version --client 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103116121-97ca4e00-46a8-11eb-8ae1-29eeb0f8862a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aws-cli&quot;&gt;AWS CLI&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;AWS EC2를 이용해 Bestion server를 만들어 AWS CLI 환경 구축&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.AWS CLI2를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~
$ curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;
$ unzip awscliv2.zip 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.아래 명령어로 AWS CLI 설치를 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103116254-28089300-46a9-11eb-8f8b-eafc08a22728.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aws-iam-authenticator&quot;&gt;aws-iam-authenticator&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;AWS EKS가 IAM을 사용하여 aws-iam-authenticator를 통해 Kubernetes 클러스터에 인증을 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.AWS S3로부터 aws-iam-authenticator binary 파일을 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws -iam-authenticator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.aws-iam-authenticator binary 파일에 실행권한을 부여한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chmod +x ./aws-iam-authenticator 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.aws-iam-authenticator binary 파일을 $HOME/bin에 위치시킨다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir -p $HOME/bin &amp;amp;&amp;amp; cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator &amp;amp;&amp;amp; export PATH=$PATH:$HOME/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4..bash_profile에 환경변수를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'export PATH=$PATH:$HOME/bin' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.aws-iam-authenticator가 실행되는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws-iam-authenticator help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103116431-d6acd380-46a9-11eb-92ca-f13f48bb1905.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;eksctl&quot;&gt;eksctl&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;EKS에 클러스터를 구축하는데 필요한 CLI tool&lt;/li&gt;
  &lt;li&gt;CloudFormation에 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.최신 버전을 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl --silent --location &quot;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz&quot; | tar xz -C /tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.eksctl binary 파일을 /usr/local/bin으로 위치시킨다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mv /tmp/eksctl /usr/local/bin 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103116474-f8a65600-46a9-11eb-9ae6-a1d9a9280b71.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;yq&quot;&gt;yq&lt;/h4&gt;

&lt;p&gt;1.아래 명령어로 yq를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'yq() {
  docker run --rm -i -v &quot;${PWD}&quot;:/workdir mikefarah/yq yq &quot;$@&quot;}' | tee -a ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;jq&quot;&gt;jq&lt;/h4&gt;

&lt;p&gt;1.아래 명령어로 jq를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install jq gettext bash-completion moreutils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;aws-load-balancer-controller-version-설정&quot;&gt;AWS Load Balancer Controller Version 설정&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'export LBC_VERSION=&quot;v2.0.0&quot;' &amp;gt;&amp;gt;  ~/.bash_profile
$ .  ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;iam-role&quot;&gt;IAM Role&lt;/h4&gt;

&lt;p&gt;1.관리자 권한으로 &lt;a href=&quot;https://console.aws.amazon.com/iam/home#/roles$new?step=review&amp;amp;commonUseCase=EC2%2BEC2&amp;amp;selectedUseCase=EC2&amp;amp;policies=arn:aws:iam::aws:policy%2FAdministratorAccess&quot;&gt;Create role&lt;/a&gt;에서 IAM role 생성한다.&lt;/p&gt;

&lt;p&gt;2.사용 사례 선택 - EC2 선택 후 다음:권한을 누른다.&lt;/p&gt;

&lt;p&gt;3.AdministratorAccess 정책을 선택 후 다음:태그를 누른다.&lt;/p&gt;

&lt;p&gt;4.태그는 생략하고 다음:검토를 누른다.&lt;/p&gt;

&lt;p&gt;5.역할 이름을 입력한 후 역할 만들기를 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103150153-9b4afb80-47b4-11eb-958e-e82102a9adcf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.인스턴스 대시보드에서 작업-보안-IAM Role 변경에 접근하여 Bastion Server에 해당하는 인스턴스의 IAM Role을 생성한 Role로 수정한다.&lt;/p&gt;

&lt;p&gt;7.Bastion Server에서 .aws/credentials 파일이 있다면 삭제한다.&lt;/p&gt;

&lt;p&gt;8.아래 명령어로 AWS REGION이 알맞게 불러와지는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)
$ export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')

$ test -n &quot;$AWS_REGION&quot; &amp;amp;&amp;amp; echo AWS_REGION is &quot;$AWS_REGION&quot; || echo AWS_REGION is not set
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;9.AWS CLI 명령어가 원활하게 진행될 수 있도록 AWS 계정 정보를 환경변수로 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;export ACCOUNT_ID=${ACCOUNT_ID}&quot; | tee -a ~/.bash_profile
$ echo &quot;export AWS_REGION=${AWS_REGION}&quot; | tee -a ~/.bash_profile
$ aws configure set default.region ${AWS_REGION}
$ aws configure get default.region
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;10.아래 명령어로 IAM Role이 유효한지 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws sts get-caller-identity --query Arn | grep eksworkshop-admin-i -q &amp;amp;&amp;amp; echo &quot;IAM role valid&quot; || echo &quot;IAM role NOT valid&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ec2-vs-fargate&quot;&gt;EC2 vs. Fargate&lt;/h3&gt;

&lt;p&gt;EKS 클러스터는 노드를 관리할 필요 없는 AWS Fargate와 같은 관리형과 AWS CloudFormation을 통해 자동으로 EC2 노드가 구성되는 자체 관리형을 지원한다.&lt;/p&gt;

&lt;p&gt;각 유형에 따른 특징은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EC2
    &lt;ul&gt;
      &lt;li&gt;자체 관리형 클러스터&lt;/li&gt;
      &lt;li&gt;인스턴스 타입에 따라 가격이 결정&lt;/li&gt;
      &lt;li&gt;각 인스턴스가 남아도는 리소스 없이 효율적 자원을 모두 사용 되어야 낭비를 줄일 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fargate
    &lt;ul&gt;
      &lt;li&gt;EC2 인스턴스 없이 컨테이너로 직접 실행 됨&lt;/li&gt;
      &lt;li&gt;컨테이너를 구동하는 데 사용한 리소스만큼(CPU, Memory) 초단위로 요금이 청구됨.&lt;/li&gt;
      &lt;li&gt;즉, 실제 리소스를 사용한 만큼만 비용이 청구되며, EC2처럼 사용하지 않은 요금에 대해 돈을 지불할 일이 줄어듬&lt;/li&gt;
      &lt;li&gt;small workload에 적합&lt;/li&gt;
      &lt;li&gt;컨테이너를 실행하기 위해 가상 머신 그룹을 프로비저닝, 구성 또는 조정할 필요 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 포스팅에서는 기본 구성인 EC2를 이용한 자체관리형 노드로 구성하는 방법을 소개한다.&lt;/p&gt;

&lt;p&gt;1.아래 내용을 cluster.yaml로 생성한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;yaml파일로 구성된 manifest들은 indent가 중요하므로 각별히 신경써주어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig
metadata:
    name: eksworkshop-eksctl-i/ **클러스터 이름
    region: ap-northeast-2 version: '1.17'

# NodeGroup holds all configuration attributes that are specific to a nodegroup 
# You can have several node group in your cluster.

nodeGroups:
    - name: cpu-nodegroup
    instanceType: m5.xlarge desiredCapacity: 3
    minSize: 0
    maxSize: 6
    volumeSize: 50 
    ssh:
        allow: true
        publicKeyPath: '~/.ssh/id_rsa.pub'

# Example of GPU node group 
    - name: Tesla-V100
    instanceType: p3.8xlarge
# Make sure the availability zone here is one of cluster availability zones.
    availabilityZones: [&quot;ap-northeast-2&quot;]
    desiredCapacity: 0
    minSize: 0
    maxSize: 4
    volumeSize: 50
    ssh:
        allow: true
        publicKeyPath: '~/.ssh/id_rsa.pub'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.아래 명령어로 bastion server의 ssh key를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 모두 Enter 입력하여 기본값 생성 
$ ssh-keygen -t rsa
# 키 내용 전체 복사 
$ cat .ssh/id_rsa.pub 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.아래 명령어로 클러스터를 구성을 명령하면 수 분 내로 손쉽게 EKS(k8s) 클러스터가 구성된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ eksctl create cluster -f cluster.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.아래 명령어로 노드의 상태를 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get nodes 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.(Optional) 노드 갯수 축소 및 확장 하려면 &lt;a href=&quot;https://aws.amazon.com/ko/premiumsupport/knowledge-center/eks-worker-node-actions/&quot;&gt;아래 명령어&lt;/a&gt;를 참고한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 노드 갯수 조정
$ eksctl scale nodegroup --cluster=클러스터 이름 --nodes=노드 개수 --name=노드그룹 이름 --nodes-min=1 --nodes-max=6
# 노드 Min, Max 값 조정 예시
$ eksctl scale nodegroup --cluster=eksworkshop-eksctl-i --name=nodegroup --nodes-min=1 --nodes-max=6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;cluster.yaml 에서 클러스터 이름, 노드그룹 이름 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig
metadata:
    name: eksworkshop-eksctl-i // **클러스터 이름 region: ap-northeast-2
    version: '1.17'

nodeGroups:
    - name: **cpu-nodegroup // 노드그룹 이름**
    instanceType: m5.xlarge desiredCapacity: 2 
    minSize: 0
    maxSize: 4
    volumeSize: 50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6.(Optional) EKS 클러스터 및 노드를 삭제 하려면 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/delete-cluster.html&quot;&gt;아래 명령어&lt;/a&gt;를 참고한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;eksctl ≥ 0.31.0-rc.0 이상인지 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ eksctl version 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;클러스터에서 실행중인 모든 서비스 나열&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get svc --all-namespaces 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;EXTERNAL-IP 값과 연결된 모든 서비스를 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl delete svc **서비스 이름** 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;클러스터 및 연결된 노드 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ eksctl delete cluster --name **클러스터 이름
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;현재 정의된 Cluster Autoscaler Group을 확인하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ aws autoscaling describe-auto-scaling-groups --query &quot;AutoScalingGroups[? Tags[? (Key=='eks:cluster-name') &amp;amp;&amp;amp; Value=='**클러스터 이름']].[AutoScalingGroupName, MinSize, MaxSize,DesiredCapacity]&quot; --output table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;optionalcluster-autoscalerca-설정&quot;&gt;(Optional)Cluster Autoscaler(CA) 설정&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Service Account IAM role Annotation
    &lt;ul&gt;
      &lt;li&gt;서비스 계정은 해당 서비스 계정을 사용하는 모든 포드의 컨테이너에 AWS 권한을 제공 할 수 있음&lt;/li&gt;
      &lt;li&gt;노드의 포드가 AWS API를 호출 할 수 있도록 더 이상 노드 IAM 역할에 확장 된 권한을 제공 할 필요 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Service Account가 IAM role을 사용가능하도록 설정 
$ eksctl utils associate-iam-oidc-provider \
--cluster eksworkshop-eksctl-i --approve

$ mkdir ~/environment/cluster-autoscaler

$ cat &amp;lt;&amp;lt;EoF &amp;gt; ~/environment/cluster-autoscaler/k8s-asg-policy.json {
&quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [
{
&quot;Action&quot;: [
&quot;autoscaling:DescribeAutoScalingGroups&quot;, &quot;autoscaling:DescribeAutoScalingInstances&quot;, &quot;autoscaling:DescribeLaunchConfigurations&quot;, &quot;autoscaling:DescribeTags&quot;, &quot;autoscaling:SetDesiredCapacity&quot;, &quot;autoscaling:TerminateInstanceInAutoScalingGroup&quot;, &quot;ec2:DescribeLaunchTemplateVersions&quot;
],
&quot;Resource&quot;: &quot;*&quot;, &quot;Effect&quot;: &quot;Allow&quot;
} ]
} EoF

# iam policy 생성
$ aws iam create-policy \
--policy-name k8s-asg-policy \
--policy-document file://~/environment/cluster-autoscaler/k8s-asg-policy.json

# kube-system namespace에 CA Service Account를 위한 IAM role을 생성 
$ eksctl create iamserviceaccount \
--name cluster-autoscaler \
--namespace kube-system \
--cluster eksworkshop-eksctl-i \
--attach-policy-arn &quot;arn:aws:iam::${ACCOUNT_ID}:policy/k8s-asg-policy&quot; \ 
--approve \
--override-existing-serviceaccounts

# Service Account가 IAM role의 ARN과 함께 잘 annotated 되었는지 확인 
$ kubectl -n kube-system describe sa cluster-autoscaler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Cluster Autoscaler Deploy
    &lt;ul&gt;
      &lt;li&gt;요청된 작업이 desired-capacity의 리소스 한계를 넘을 때 CA에 지정한 Max node 범위 안에서 자동으로 node를 확장할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Deploy the Cluster Autoscaler
$ kubectl apply -f https://www.eksworkshop.com/beginner/080_scaling/deploy_ca.files/cluster-autoscaler-autodiscover.yaml

# pod가 실행되고 있는 node가 삭제되는 것을 방지하기 위한 설정 
$ kubectl -n kube-system \
annotate deployment.apps/cluster-autoscaler \ 
cluster-autoscaler.kubernetes.io/safe-to-evict=&quot;false&quot;

# Autoscaler image를 업데이트
$ export K8S_VERSION=$(kubectl version --short | grep 'Server Version:' | sed 's/[^0-9.]*\([0-9.]*\).*/\1/' | cut -d. -f1,2)
$ export AUTOSCALER_VERSION=$(curl -s &quot;https://api.github.com/repos/kubernetes/autoscaler/releases&quot; | grep '&quot;tag_name&quot;:' | sed -s 's/.*-\([0-9][0-9\.]*\).*/\1/' | grep -m1 ${K8S_VERSION})
$ kubectl -n kube-system \
set image deployment.apps/cluster-autoscaler \
cluster-autoscaler=us.gcr.io/k8s-artifacts-prod/autoscaling/cluster-autoscaler:v${AUTOSC ALER_VERSION}

# 로그 확인
$ kubectl -n kube-system logs -f deployment/cluster-autoscaler

# Autoscaling Group 설정
$ aws autoscaling \
update-auto-scaling-group \ 
--auto-scaling-group-name ${ASG_NAME} \ 
--min-size 1 \ # 최소 노드 개수
--desired-capacity 3 \ 지정 노드 개수
--max-size 6 # 최대 노드 개수
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kubeflow-설치&quot;&gt;Kubeflow 설치&lt;/h2&gt;

&lt;p&gt;현재 Amazon에서 지원하는 EKS버전과 Kubeflow v1.2의 호환 여부는 다음과 같다. 본 포스팅에서는 EKS v1.17을 사용하고 있으므로, Kubeflow v1.2 기준으로 설치 과정을 소개한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103150473-eb778d00-47b7-11eb-9c31-438418569d62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1.Bastion Server에서 Kubeflow GitHub에서 &lt;a href=&quot;https://github.com/kubeflow/kfctl/releases/download/v1.2.0/kfctl_v1.2.0-0-gbc038f9_linux.tar.gz&quot;&gt;Release v1.2.0&lt;/a&gt;을 다운로드 한다.&lt;/p&gt;

&lt;p&gt;2.다음 명령어로 tar 압축을 해제한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tar -xvf kfctl_v1.2.0-0-gbc038f9_linux.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.아래 명령어로 kfctl Binary 파일을 이동시킨다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mv ./kfctl /usr/local/bin 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.배포 과정을 간략화 하기위해 아래 환경변수를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export PATH=$PATH:&quot;/usr/local/bin&quot;
$ export CONFIG_URI=&quot;https://raw.githubusercontent.com/kubeflow/manifests/v1.2-branch/kfdef/kfctl_aws.v1.2.0.yaml&quot;
$ export AWS_CLUSTER_NAME=eksworkshop-eksctl-i / **클러스터 이름
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.아래 명령어로 클러스터 이름으로 폴더를 생성하고, kubeflow 설치를 위한 manifest를 다운로드 받는다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir ${AWS_CLUSTER_NAME} &amp;amp;&amp;amp; cd ${AWS_CLUSTER_NAME}
$ wget -O kfctl_aws.yaml $CONFIG_URI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6.아래 명령어로 Kubeflow 클러스터를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kfctl apply -V -f kfctl_aws.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7.설치가 완료되기까지 약 수 분이 소요된다. 명령어 프롬프트가 나타나면 아래 명령어로 kubeflow namespace에 pod들이 올라왔는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl -n kubeflow get all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;8.Kubeflow 대시보드에 접근하기 위해 아래 명령어로 Kubeflow 서비스의 Endpoint(ADDRESS)를 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl get ingress -n istio-system

NAMESPACE      NAME            HOSTS   ADDRESS                                                             PORTS   AGE
istio-system   istio-ingress   *       a743484b-istiosystem-istio-2af2-xxxxxx.ap-northeast-2.elb.amazonaws.com   80      1h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;9.Default 계정은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ID : admin@kubeflow.org
PW : 12341234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60086878/103151073-0f3dd180-47be-11eb-9c8e-3fa9c64ce30a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kubeflow.org/docs/aws/deploy/install-kubeflow/&quot;&gt;Installing Kubeflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eksworkshop.com/020_prerequisites/&quot;&gt;Amazon EKS Workshop Start the workshop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/what-is-eks.html&quot;&gt;Amazon EKS란 무엇입니까?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/premiumsupport/knowledge-center/eks-worker-node-actions/&quot;&gt;EKS Worker Node Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>김인규</name></author><category term="Kubernetes" /><category term="AWS" /><category term="EKS" /><category term="Kubeflow" /><summary type="html">이번에는 지난 엔코아 데이터과학자 양성과정에서 진행한 서울특별시 공공자전거 따릉이 잔여대수 예측 프로젝트를 진행하면서 사용했던 Kubeflow라는 툴에 대해 소개하고자 한다.</summary></entry></feed>